<ENUM>
<NAME>hb_aat_layout_feature_type_t</NAME>
typedef enum
{
  HB_AAT_LAYOUT_FEATURE_TYPE_INVALID				= 0xFFFF,

  HB_AAT_LAYOUT_FEATURE_TYPE_ALL_TYPOGRAPHIC			= 0,
  HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES				= 1,
  HB_AAT_LAYOUT_FEATURE_TYPE_CURISVE_CONNECTION			= 2,
  HB_AAT_LAYOUT_FEATURE_TYPE_LETTER_CASE			= 3,
  HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION		= 4,
  HB_AAT_LAYOUT_FEATURE_TYPE_LINGUISTIC_REARRANGEMENT		= 5,
  HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING			= 6,
  HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE			= 8,
  HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE			= 9,
  HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION			= 10,
  HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS				= 11,
  HB_AAT_LAYOUT_FEATURE_TYPE_OVERLAPPING_CHARACTERS_TYPE	= 13,
  HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS			= 14,
  HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS		= 15,
  HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE			= 16,
  HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_ALTERNATIVES		= 17,
  HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE		= 18,
  HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS			= 19,
  HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE			= 20,
  HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE			= 21,
  HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING			= 22,
  HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION			= 23,
  HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE			= 24,
  HB_AAT_LAYOUT_FEATURE_TYPE_KANA_SPACING_TYPE			= 25,
  HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE		= 26,
  HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE		= 27,
  HB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA				= 28,
  HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE	= 29,
  HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE	= 30,
  HB_AAT_LAYOUT_FEATURE_TYPE_CJK_VERTICAL_ROMAN_PLACEMENT_TYPE	= 31,
  HB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN			= 32,
  HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT		= 33,
  HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA			= 34,
  HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES		= 35,
  HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES		= 36,
  HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE				= 37,
  HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE				= 38,
  HB_AAT_LAYOUT_FEATURE_TYPE_LANGUAGE_TAG_TYPE			= 39,
  HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE		= 103,

  /*< private >*/
  _HB_AAT_LAYOUT_FEATURE_TYPE_MAX_VALUE = HB_TAG_MAX_SIGNED /*< skip >*/
} hb_aat_layout_feature_type_t;
</ENUM>
<ENUM>
<NAME>hb_aat_layout_feature_selector_t</NAME>
typedef enum
{
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INVALID			= 0xFFFF,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_ALL_TYPOGRAPHIC */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_TYPE_FEATURES_ON		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_TYPE_FEATURES_OFF		= 1,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_REQUIRED_LIGATURES_ON		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_REQUIRED_LIGATURES_OFF		= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_COMMON_LIGATURES_ON		= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_COMMON_LIGATURES_OFF		= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_RARE_LIGATURES_ON		= 4,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_RARE_LIGATURES_OFF		= 5,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LOGOS_ON			= 6,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LOGOS_OFF			= 7,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_REBUS_PICTURES_ON		= 8,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_REBUS_PICTURES_OFF		= 9,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DIPHTHONG_LIGATURES_ON		= 10,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DIPHTHONG_LIGATURES_OFF	= 11,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SQUARED_LIGATURES_ON		= 12,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SQUARED_LIGATURES_OFF		= 13,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ABBREV_SQUARED_LIGATURES_ON	= 14,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ABBREV_SQUARED_LIGATURES_OFF	= 15,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SYMBOL_LIGATURES_ON		= 16,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SYMBOL_LIGATURES_OFF		= 17,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_LIGATURES_ON	= 18,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_LIGATURES_OFF	= 19,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_ON	= 20,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_OFF	= 21,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_UNCONNECTED			= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PARTIALLY_CONNECTED		= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CURSIVE			= 2,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_LETTER_CASE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_AND_LOWER_CASE		= 0, /* deprecated */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_CAPS			= 1, /* deprecated */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_LOWER_CASE			= 2, /* deprecated */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SMALL_CAPS			= 3, /* deprecated */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INITIAL_CAPS			= 4, /* deprecated */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INITIAL_CAPS_AND_SMALL_CAPS	= 5, /* deprecated */

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_ON	= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_OFF	= 1,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_LINGUISTIC_REARRANGEMENT */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LINGUISTIC_REARRANGEMENT_ON	= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LINGUISTIC_REARRANGEMENT_OFF	= 1,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_MONOSPACED_NUMBERS		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_NUMBERS		= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_THIRD_WIDTH_NUMBERS		= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_QUARTER_WIDTH_NUMBERS		= 3,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_INITIAL_SWASHES_ON	= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_INITIAL_SWASHES_OFF	= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_FINAL_SWASHES_ON		= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_FINAL_SWASHES_OFF		= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_INITIAL_SWASHES_ON	= 4,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_INITIAL_SWASHES_OFF	= 5,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_FINAL_SWASHES_ON		= 6,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_FINAL_SWASHES_OFF		= 7,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NON_FINAL_SWASHES_ON		= 8,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NON_FINAL_SWASHES_OFF		= 9,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SHOW_DIACRITICS		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HIDE_DIACRITICS		= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DECOMPOSE_DIACRITICS		= 2,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NORMAL_POSITION		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SUPERIORS			= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INFERIORS			= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ORDINALS			= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SCIENTIFIC_INFERIORS		= 4,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_FRACTIONS			= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_VERTICAL_FRACTIONS		= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DIAGONAL_FRACTIONS		= 2,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_OVERLAPPING_CHARACTERS_TYPE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PREVENT_OVERLAP_ON		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PREVENT_OVERLAP_OFF		= 1,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHENS_TO_EM_DASH_ON		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHENS_TO_EM_DASH_OFF		= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_EN_DASH_ON		= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_EN_DASH_OFF		= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASHED_ZERO_ON		= 4,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASHED_ZERO_OFF		= 5,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_FORM_INTERROBANG_ON		= 6,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_FORM_INTERROBANG_OFF		= 7,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SMART_QUOTES_ON		= 8,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SMART_QUOTES_OFF		= 9,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIODS_TO_ELLIPSIS_ON		= 10,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIODS_TO_ELLIPSIS_OFF	= 11,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_MINUS_ON		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_MINUS_OFF		= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ASTERISK_TO_MULTIPLY_ON	= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ASTERISK_TO_MULTIPLY_OFF	= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASH_TO_DIVIDE_ON		= 4,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASH_TO_DIVIDE_OFF		= 5,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INEQUALITY_LIGATURES_ON	= 6,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INEQUALITY_LIGATURES_OFF	= 7,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPONENTS_ON			= 8,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPONENTS_OFF			= 9,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_MATHEMATICAL_GREEK_ON		= 10,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_MATHEMATICAL_GREEK_OFF		= 11,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ORNAMENTS			= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DINGBATS			= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PI_CHARACTERS			= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_FLEURONS			= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DECORATIVE_BORDERS		= 4,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INTERNATIONAL_SYMBOLS		= 5,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_MATH_SYMBOLS			= 6,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_ALTERNATIVES */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ALTERNATES			= 0,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL1			= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL2			= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL3			= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL4			= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL5			= 4,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_STYLE_OPTIONS		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DISPLAY_TEXT			= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ENGRAVED_TEXT			= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ILLUMINATED_CAPS		= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TITLING_CAPS			= 4,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TALL_CAPS			= 5,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_CHARACTERS		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SIMPLIFIED_CHARACTERS		= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1978_CHARACTERS		= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1983_CHARACTERS		= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1990_CHARACTERS		= 4,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_ONE		= 5,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_TWO		= 6,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_THREE		= 7,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_FOUR		= 8,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_FIVE		= 9,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPERT_CHARACTERS		= 10,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS2004_CHARACTERS		= 11,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HOJO_CHARACTERS		= 12,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NLCCHARACTERS			= 13,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_NAMES_CHARACTERS	= 14,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_NUMBERS		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_NUMBERS		= 1,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_TEXT		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_MONOSPACED_TEXT		= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_TEXT		= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_THIRD_WIDTH_TEXT		= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_QUARTER_WIDTH_TEXT		= 4,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_PROPORTIONAL_TEXT		= 5,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_HALF_WIDTH_TEXT		= 6,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_TRANSLITERATION		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL		= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HIRAGANA_TO_KATAKANA		= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_KATAKANA_TO_HIRAGANA		= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_KANA_TO_ROMANIZATION		= 4,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMANIZATION_TO_HIRAGANA	= 5,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMANIZATION_TO_KATAKANA	= 6,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_ONE	= 7,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_TWO	= 8,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_THREE	= 9,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ANNOTATION			= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_BOX_ANNOTATION			= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ROUNDED_BOX_ANNOTATION		= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CIRCLE_ANNOTATION		= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_CIRCLE_ANNOTATION	= 4,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PARENTHESIS_ANNOTATION		= 5,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIOD_ANNOTATION		= 6,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMAN_NUMERAL_ANNOTATION	= 7,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DIAMOND_ANNOTATION		= 8,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_BOX_ANNOTATION	= 9,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_ROUNDED_BOX_ANNOTATION= 10,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_KANA_SPACING_TYPE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_KANA		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_KANA		= 1,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_IDEOGRAPHS		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_IDEOGRAPHS	= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_IDEOGRAPHS		= 2,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CANONICAL_COMPOSITION_ON	= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CANONICAL_COMPOSITION_OFF	= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_COMPATIBILITY_COMPOSITION_ON	= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_COMPATIBILITY_COMPOSITION_OFF	= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRANSCODING_COMPOSITION_ON	= 4,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRANSCODING_COMPOSITION_OFF	= 5,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_RUBY_KANA			= 0, /* deprecated - use HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_OFF instead */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA			= 1, /* deprecated - use HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_ON instead */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_ON			= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_OFF			= 3,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_CJK_SYMBOL_ALTERNATIVES	= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_ONE		= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_TWO		= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_THREE		= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_FOUR		= 4,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_FIVE		= 5,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_IDEOGRAPHIC_ALTERNATIVES	= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_ONE		= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_TWO		= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_THREE		= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_FOUR		= 4,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_FIVE		= 5,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_VERTICAL_ROMAN_PLACEMENT_TYPE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_VERTICAL_ROMAN_CENTERED	= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_VERTICAL_ROMAN_HBASELINE	= 1,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_CJK_ITALIC_ROMAN		= 0,    /* deprecated - use HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_OFF instead */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN		= 1,    /* deprecated - use HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_ON instead */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_ON		= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_OFF		= 3,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_LAYOUT_ON	= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_LAYOUT_OFF	= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_SPACING_ON	= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_SPACING_OFF	= 3,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_HORIZ_KANA_ON	= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_HORIZ_KANA_OFF	= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_VERT_KANA_ON		= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_VERT_KANA_OFF	= 3,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_STYLISTIC_ALTERNATES	= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ONE_ON		= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ONE_OFF		= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWO_ON		= 4,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWO_OFF		= 5,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THREE_ON		= 6,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THREE_OFF	= 7,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOUR_ON		= 8,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOUR_OFF		= 9,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIVE_ON		= 10,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIVE_OFF		= 11,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIX_ON		= 12,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIX_OFF		= 13,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVEN_ON		= 14,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVEN_OFF	= 15,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHT_ON		= 16,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHT_OFF	= 17,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINE_ON		= 18,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINE_OFF		= 19,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TEN_ON		= 20,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TEN_OFF		= 21,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ELEVEN_ON	= 22,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ELEVEN_OFF	= 23,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWELVE_ON	= 24,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWELVE_OFF	= 25,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THIRTEEN_ON	= 26,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THIRTEEN_OFF	= 27,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOURTEEN_ON	= 28,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOURTEEN_OFF	= 29,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIFTEEN_ON	= 30,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIFTEEN_OFF	= 31,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIXTEEN_ON	= 32,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIXTEEN_OFF	= 33,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVENTEEN_ON	= 34,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVENTEEN_OFF	= 35,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHTEEN_ON	= 36,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHTEEN_OFF	= 37,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINETEEN_ON	= 38,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINETEEN_OFF	= 39,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWENTY_ON	= 40,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWENTY_OFF	= 41,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_ALTERNATES_ON	= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_ALTERNATES_OFF	= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SWASH_ALTERNATES_ON		= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SWASH_ALTERNATES_OFF		= 3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_SWASH_ALTERNATES_ON	= 4,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_SWASH_ALTERNATES_OFF= 5,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_LOWER_CASE		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_SMALL_CAPS		= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_PETITE_CAPS		= 2,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_UPPER_CASE		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_SMALL_CAPS		= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_PETITE_CAPS		= 2,

  /* Selectors for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE */
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_CJK_ROMAN		= 0,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_CJK_ROMAN		= 1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_CJK_ROMAN		= 2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_CJK_ROMAN		= 3,

  /*< private >*/
  _HB_AAT_LAYOUT_FEATURE_SELECTOR_MAX_VALUE = HB_TAG_MAX_SIGNED /*< skip >*/
} hb_aat_layout_feature_selector_t;
</ENUM>
<FUNCTION>
<NAME>hb_aat_layout_get_feature_types</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t                    *face, unsigned int                  start_offset, unsigned int                 *feature_count, hb_aat_layout_feature_type_t *features
</FUNCTION>
<FUNCTION>
<NAME>hb_aat_layout_feature_type_get_name_id</NAME>
<RETURNS>hb_ot_name_id_t</RETURNS>
hb_face_t                    *face, hb_aat_layout_feature_type_t  feature_type
</FUNCTION>
<STRUCT>
<NAME>hb_aat_layout_feature_selector_info_t</NAME>
typedef struct hb_aat_layout_feature_selector_info_t {
  hb_ot_name_id_t			name_id;
  hb_aat_layout_feature_selector_t	enable;
  hb_aat_layout_feature_selector_t	disable;
  /*< private >*/
  unsigned int				reserved;
} hb_aat_layout_feature_selector_info_t;
</STRUCT>
<MACRO>
<NAME>HB_AAT_LAYOUT_NO_SELECTOR_INDEX</NAME>
#define HB_AAT_LAYOUT_NO_SELECTOR_INDEX		0xFFFFu
</MACRO>
<FUNCTION>
<NAME>hb_aat_layout_feature_type_get_selector_infos</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t                             *face, hb_aat_layout_feature_type_t           feature_type, unsigned int                           start_offset, unsigned int                          *selector_count, hb_aat_layout_feature_selector_info_t *selectors, unsigned int                          *default_index
</FUNCTION>
<FUNCTION>
<NAME>hb_aat_layout_has_substitution</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_aat_layout_has_positioning</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_aat_layout_has_tracking</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t *face
</FUNCTION>
<MACRO>
<NAME>HB_AAT_H_IN</NAME>
#define HB_AAT_H_IN
</MACRO>
<ENUM>
<NAME>hb_memory_mode_t</NAME>
typedef enum {
  HB_MEMORY_MODE_DUPLICATE,
  HB_MEMORY_MODE_READONLY,
  HB_MEMORY_MODE_WRITABLE,
  HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE
} hb_memory_mode_t;
</ENUM>
<TYPEDEF>
<NAME>hb_blob_t</NAME>
typedef struct hb_blob_t hb_blob_t;
</TYPEDEF>
<FUNCTION>
<NAME>hb_blob_create</NAME>
<RETURNS>hb_blob_t *</RETURNS>
const char        *data, unsigned int       length, hb_memory_mode_t   mode, void              *user_data, hb_destroy_func_t  destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_blob_create_or_fail</NAME>
<RETURNS>hb_blob_t *</RETURNS>
const char        *data, unsigned int       length, hb_memory_mode_t   mode, void              *user_data, hb_destroy_func_t  destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_blob_create_from_file</NAME>
<RETURNS>hb_blob_t *</RETURNS>
const char *file_name
</FUNCTION>
<FUNCTION>
<NAME>hb_blob_create_from_file_or_fail</NAME>
<RETURNS>hb_blob_t *</RETURNS>
const char *file_name
</FUNCTION>
<FUNCTION>
<NAME>hb_blob_create_sub_blob</NAME>
<RETURNS>hb_blob_t *</RETURNS>
hb_blob_t    *parent, unsigned int  offset, unsigned int  length
</FUNCTION>
<FUNCTION>
<NAME>hb_blob_copy_writable_or_fail</NAME>
<RETURNS>hb_blob_t *</RETURNS>
hb_blob_t *blob
</FUNCTION>
<FUNCTION>
<NAME>hb_blob_get_empty</NAME>
<RETURNS>hb_blob_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_blob_reference</NAME>
<RETURNS>hb_blob_t *</RETURNS>
hb_blob_t *blob
</FUNCTION>
<FUNCTION>
<NAME>hb_blob_destroy</NAME>
<RETURNS>void</RETURNS>
hb_blob_t *blob
</FUNCTION>
<FUNCTION>
<NAME>hb_blob_set_user_data</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_blob_t          *blob, hb_user_data_key_t *key, void *              data, hb_destroy_func_t   destroy, hb_bool_t           replace
</FUNCTION>
<FUNCTION>
<NAME>hb_blob_get_user_data</NAME>
<RETURNS>void *</RETURNS>
const hb_blob_t    *blob, hb_user_data_key_t *key
</FUNCTION>
<FUNCTION>
<NAME>hb_blob_make_immutable</NAME>
<RETURNS>void</RETURNS>
hb_blob_t *blob
</FUNCTION>
<FUNCTION>
<NAME>hb_blob_is_immutable</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_blob_t *blob
</FUNCTION>
<FUNCTION>
<NAME>hb_blob_get_length</NAME>
<RETURNS>unsigned int</RETURNS>
hb_blob_t *blob
</FUNCTION>
<FUNCTION>
<NAME>hb_blob_get_data</NAME>
<RETURNS>const char *</RETURNS>
hb_blob_t *blob, unsigned int *length
</FUNCTION>
<FUNCTION>
<NAME>hb_blob_get_data_writable</NAME>
<RETURNS>char *</RETURNS>
hb_blob_t *blob, unsigned int *length
</FUNCTION>
<STRUCT>
<NAME>hb_glyph_info_t</NAME>
typedef struct hb_glyph_info_t {
  hb_codepoint_t codepoint;
  /*< private >*/
  hb_mask_t      mask;
  /*< public >*/
  uint32_t       cluster;

  /*< private >*/
  hb_var_int_t   var1;
  hb_var_int_t   var2;
} hb_glyph_info_t;
</STRUCT>
<ENUM>
<NAME>hb_glyph_flags_t</NAME>
typedef enum { /*< flags >*/
  HB_GLYPH_FLAG_UNSAFE_TO_BREAK			= 0x00000001,
  HB_GLYPH_FLAG_UNSAFE_TO_CONCAT		= 0x00000002,
  HB_GLYPH_FLAG_SAFE_TO_INSERT_TATWEEL		= 0x00000004,

  HB_GLYPH_FLAG_DEFINED				= 0x00000007 /* OR of all defined flags */
} hb_glyph_flags_t;
</ENUM>
<FUNCTION>
<NAME>hb_glyph_info_get_glyph_flags</NAME>
<RETURNS>hb_glyph_flags_t</RETURNS>
const hb_glyph_info_t *info
</FUNCTION>
<STRUCT>
<NAME>hb_glyph_position_t</NAME>
typedef struct hb_glyph_position_t {
  hb_position_t  x_advance;
  hb_position_t  y_advance;
  hb_position_t  x_offset;
  hb_position_t  y_offset;

  /*< private >*/
  hb_var_int_t   var;
} hb_glyph_position_t;
</STRUCT>
<STRUCT>
<NAME>hb_segment_properties_t</NAME>
typedef struct hb_segment_properties_t {
  hb_direction_t  direction;
  hb_script_t     script;
  hb_language_t   language;
  /*< private >*/
  void           *reserved1;
  void           *reserved2;
} hb_segment_properties_t;
</STRUCT>
<MACRO>
<NAME>HB_SEGMENT_PROPERTIES_DEFAULT</NAME>
#define HB_SEGMENT_PROPERTIES_DEFAULT {HB_DIRECTION_INVALID, \
				       HB_SCRIPT_INVALID, \
				       HB_LANGUAGE_INVALID, \
				       (void *) 0, \
				       (void *) 0}
</MACRO>
<FUNCTION>
<NAME>hb_segment_properties_equal</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_segment_properties_t *a, const hb_segment_properties_t *b
</FUNCTION>
<FUNCTION>
<NAME>hb_segment_properties_hash</NAME>
<RETURNS>unsigned int</RETURNS>
const hb_segment_properties_t *p
</FUNCTION>
<FUNCTION>
<NAME>hb_segment_properties_overlay</NAME>
<RETURNS>void</RETURNS>
hb_segment_properties_t *p, const hb_segment_properties_t *src
</FUNCTION>
<TYPEDEF>
<NAME>hb_buffer_t</NAME>
typedef struct hb_buffer_t hb_buffer_t;
</TYPEDEF>
<FUNCTION>
<NAME>hb_buffer_create</NAME>
<RETURNS>hb_buffer_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_create_similar</NAME>
<RETURNS>hb_buffer_t *</RETURNS>
const hb_buffer_t *src
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_reset</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_get_empty</NAME>
<RETURNS>hb_buffer_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_reference</NAME>
<RETURNS>hb_buffer_t *</RETURNS>
hb_buffer_t *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_destroy</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_set_user_data</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_buffer_t        *buffer, hb_user_data_key_t *key, void *              data, hb_destroy_func_t   destroy, hb_bool_t           replace
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_get_user_data</NAME>
<RETURNS>void *</RETURNS>
const hb_buffer_t  *buffer, hb_user_data_key_t *key
</FUNCTION>
<ENUM>
<NAME>hb_buffer_content_type_t</NAME>
typedef enum {
  HB_BUFFER_CONTENT_TYPE_INVALID = 0,
  HB_BUFFER_CONTENT_TYPE_UNICODE,
  HB_BUFFER_CONTENT_TYPE_GLYPHS
} hb_buffer_content_type_t;
</ENUM>
<FUNCTION>
<NAME>hb_buffer_set_content_type</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t              *buffer, hb_buffer_content_type_t  content_type
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_get_content_type</NAME>
<RETURNS>hb_buffer_content_type_t</RETURNS>
const hb_buffer_t *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_set_unicode_funcs</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t        *buffer, hb_unicode_funcs_t *unicode_funcs
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_get_unicode_funcs</NAME>
<RETURNS>hb_unicode_funcs_t *</RETURNS>
const hb_buffer_t  *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_set_direction</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t    *buffer, hb_direction_t  direction
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_get_direction</NAME>
<RETURNS>hb_direction_t</RETURNS>
const hb_buffer_t *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_set_script</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t *buffer, hb_script_t  script
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_get_script</NAME>
<RETURNS>hb_script_t</RETURNS>
const hb_buffer_t *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_set_language</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t   *buffer, hb_language_t  language
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_get_language</NAME>
<RETURNS>hb_language_t</RETURNS>
const hb_buffer_t *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_set_segment_properties</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t *buffer, const hb_segment_properties_t *props
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_get_segment_properties</NAME>
<RETURNS>void</RETURNS>
const hb_buffer_t *buffer, hb_segment_properties_t *props
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_guess_segment_properties</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t *buffer
</FUNCTION>
<ENUM>
<NAME>hb_buffer_flags_t</NAME>
typedef enum { /*< flags >*/
  HB_BUFFER_FLAG_DEFAULT			= 0x00000000u,
  HB_BUFFER_FLAG_BOT				= 0x00000001u, /* Beginning-of-text */
  HB_BUFFER_FLAG_EOT				= 0x00000002u, /* End-of-text */
  HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES	= 0x00000004u,
  HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES	= 0x00000008u,
  HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE	= 0x00000010u,
  HB_BUFFER_FLAG_VERIFY				= 0x00000020u,
  HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT	= 0x00000040u,
  HB_BUFFER_FLAG_PRODUCE_SAFE_TO_INSERT_TATWEEL	= 0x00000080u,

  HB_BUFFER_FLAG_DEFINED			= 0x000000FFu
} hb_buffer_flags_t;
</ENUM>
<FUNCTION>
<NAME>hb_buffer_set_flags</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t       *buffer, hb_buffer_flags_t  flags
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_get_flags</NAME>
<RETURNS>hb_buffer_flags_t</RETURNS>
const hb_buffer_t *buffer
</FUNCTION>
<ENUM>
<NAME>hb_buffer_cluster_level_t</NAME>
typedef enum {
  HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES	= 0,
  HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS	= 1,
  HB_BUFFER_CLUSTER_LEVEL_CHARACTERS		= 2,
  HB_BUFFER_CLUSTER_LEVEL_DEFAULT = HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES
} hb_buffer_cluster_level_t;
</ENUM>
<FUNCTION>
<NAME>hb_buffer_set_cluster_level</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t               *buffer, hb_buffer_cluster_level_t  cluster_level
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_get_cluster_level</NAME>
<RETURNS>hb_buffer_cluster_level_t</RETURNS>
const hb_buffer_t *buffer
</FUNCTION>
<MACRO>
<NAME>HB_BUFFER_REPLACEMENT_CODEPOINT_DEFAULT</NAME>
#define HB_BUFFER_REPLACEMENT_CODEPOINT_DEFAULT 0xFFFDu
</MACRO>
<FUNCTION>
<NAME>hb_buffer_set_replacement_codepoint</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t    *buffer, hb_codepoint_t  replacement
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_get_replacement_codepoint</NAME>
<RETURNS>hb_codepoint_t</RETURNS>
const hb_buffer_t *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_set_invisible_glyph</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t    *buffer, hb_codepoint_t  invisible
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_get_invisible_glyph</NAME>
<RETURNS>hb_codepoint_t</RETURNS>
const hb_buffer_t *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_set_not_found_glyph</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t    *buffer, hb_codepoint_t  not_found
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_get_not_found_glyph</NAME>
<RETURNS>hb_codepoint_t</RETURNS>
const hb_buffer_t *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_clear_contents</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_pre_allocate</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_buffer_t  *buffer, unsigned int  size
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_allocation_successful</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_buffer_t  *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_reverse</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_reverse_range</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t *buffer, unsigned int start, unsigned int end
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_reverse_clusters</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_add</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t    *buffer, hb_codepoint_t  codepoint, unsigned int    cluster
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_add_utf8</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t  *buffer, const char   *text, int           text_length, unsigned int  item_offset, int           item_length
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_add_utf16</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t    *buffer, const uint16_t *text, int             text_length, unsigned int    item_offset, int             item_length
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_add_utf32</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t    *buffer, const uint32_t *text, int             text_length, unsigned int    item_offset, int             item_length
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_add_latin1</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t   *buffer, const uint8_t *text, int            text_length, unsigned int   item_offset, int            item_length
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_add_codepoints</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t          *buffer, const hb_codepoint_t *text, int                   text_length, unsigned int          item_offset, int                   item_length
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_append</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t *buffer, const hb_buffer_t *source, unsigned int start, unsigned int end
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_set_length</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_buffer_t  *buffer, unsigned int  length
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_get_length</NAME>
<RETURNS>unsigned int</RETURNS>
const hb_buffer_t *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_get_glyph_infos</NAME>
<RETURNS>hb_glyph_info_t *</RETURNS>
hb_buffer_t  *buffer, unsigned int *length
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_get_glyph_positions</NAME>
<RETURNS>hb_glyph_position_t *</RETURNS>
hb_buffer_t  *buffer, unsigned int *length
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_has_positions</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_buffer_t  *buffer
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_normalize_glyphs</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t *buffer
</FUNCTION>
<ENUM>
<NAME>hb_buffer_serialize_flags_t</NAME>
typedef enum { /*< flags >*/
  HB_BUFFER_SERIALIZE_FLAG_DEFAULT		= 0x00000000u,
  HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS		= 0x00000001u,
  HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS		= 0x00000002u,
  HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES	= 0x00000004u,
  HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS	= 0x00000008u,
  HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS		= 0x00000010u,
  HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES		= 0x00000020u,

  HB_BUFFER_SERIALIZE_FLAG_DEFINED		= 0x0000003Fu
} hb_buffer_serialize_flags_t;
</ENUM>
<ENUM>
<NAME>hb_buffer_serialize_format_t</NAME>
typedef enum {
  HB_BUFFER_SERIALIZE_FORMAT_TEXT	= HB_TAG('T','E','X','T'),
  HB_BUFFER_SERIALIZE_FORMAT_JSON	= HB_TAG('J','S','O','N'),
  HB_BUFFER_SERIALIZE_FORMAT_INVALID	= HB_TAG_NONE
} hb_buffer_serialize_format_t;
</ENUM>
<FUNCTION>
<NAME>hb_buffer_serialize_format_from_string</NAME>
<RETURNS>hb_buffer_serialize_format_t</RETURNS>
const char *str, int len
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_serialize_format_to_string</NAME>
<RETURNS>const char *</RETURNS>
hb_buffer_serialize_format_t format
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_serialize_list_formats</NAME>
<RETURNS>const char **</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_serialize_glyphs</NAME>
<RETURNS>unsigned int</RETURNS>
hb_buffer_t *buffer, unsigned int start, unsigned int end, char *buf, unsigned int buf_size, unsigned int *buf_consumed, hb_font_t *font, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_serialize_unicode</NAME>
<RETURNS>unsigned int</RETURNS>
hb_buffer_t *buffer, unsigned int start, unsigned int end, char *buf, unsigned int buf_size, unsigned int *buf_consumed, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_serialize</NAME>
<RETURNS>unsigned int</RETURNS>
hb_buffer_t *buffer, unsigned int start, unsigned int end, char *buf, unsigned int buf_size, unsigned int *buf_consumed, hb_font_t *font, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_deserialize_glyphs</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_buffer_t *buffer, const char *buf, int buf_len, const char **end_ptr, hb_font_t *font, hb_buffer_serialize_format_t format
</FUNCTION>
<FUNCTION>
<NAME>hb_buffer_deserialize_unicode</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_buffer_t *buffer, const char *buf, int buf_len, const char **end_ptr, hb_buffer_serialize_format_t format
</FUNCTION>
<ENUM>
<NAME>hb_buffer_diff_flags_t</NAME>
typedef enum { /*< flags >*/
  HB_BUFFER_DIFF_FLAG_EQUAL			= 0x0000,

  /* Buffers with different content_type cannot be meaningfully compared
   * in any further detail. */
  HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH	= 0x0001,

  /* For buffers with differing length, the per-glyph comparison is not
   * attempted, though we do still scan reference for dottedcircle / .notdef
   * glyphs. */
  HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH		= 0x0002,

  /* We want to know if dottedcircle / .notdef glyphs are present in the
   * reference, as we may not care so much about other differences in this
   * case. */
  HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT		= 0x0004,
  HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT	= 0x0008,

  /* If the buffers have the same length, we compare them glyph-by-glyph
   * and report which aspect(s) of the glyph info/position are different. */
  HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH	= 0x0010,
  HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH		= 0x0020,
  HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH	= 0x0040,
  HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH		= 0x0080

} hb_buffer_diff_flags_t;
</ENUM>
<FUNCTION>
<NAME>hb_buffer_diff</NAME>
<RETURNS>hb_buffer_diff_flags_t</RETURNS>
hb_buffer_t *buffer, hb_buffer_t *reference, hb_codepoint_t dottedcircle_glyph, unsigned int position_fuzz
</FUNCTION>
<USER_FUNCTION>
<NAME>hb_buffer_message_func_t</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_buffer_t *buffer, hb_font_t   *font, const char  *message, void        *user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>hb_buffer_set_message_func</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t *buffer, hb_buffer_message_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_cairo_font_face_create_for_font</NAME>
<RETURNS>cairo_font_face_t *</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_cairo_font_face_get_font</NAME>
<RETURNS>hb_font_t *</RETURNS>
cairo_font_face_t *font_face
</FUNCTION>
<FUNCTION>
<NAME>hb_cairo_font_face_create_for_face</NAME>
<RETURNS>cairo_font_face_t *</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_cairo_font_face_get_face</NAME>
<RETURNS>hb_face_t *</RETURNS>
cairo_font_face_t *font_face
</FUNCTION>
<USER_FUNCTION>
<NAME>hb_cairo_font_init_func_t</NAME>
<RETURNS>hb_font_t *</RETURNS>
hb_font_t *font, cairo_scaled_font_t *scaled_font, void *user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>hb_cairo_font_face_set_font_init_func</NAME>
<RETURNS>void</RETURNS>
cairo_font_face_t *font_face, hb_cairo_font_init_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_cairo_scaled_font_get_font</NAME>
<RETURNS>hb_font_t *</RETURNS>
cairo_scaled_font_t *scaled_font
</FUNCTION>
<FUNCTION>
<NAME>hb_cairo_font_face_set_scale_factor</NAME>
<RETURNS>void</RETURNS>
cairo_font_face_t *font_face, unsigned int scale_factor
</FUNCTION>
<FUNCTION>
<NAME>hb_cairo_font_face_get_scale_factor</NAME>
<RETURNS>unsigned int</RETURNS>
cairo_font_face_t *font_face
</FUNCTION>
<FUNCTION>
<NAME>hb_cairo_glyphs_from_buffer</NAME>
<RETURNS>void</RETURNS>
hb_buffer_t *buffer, hb_bool_t utf8_clusters, double x_scale_factor, double y_scale_factor, double x, double y, const char *utf8, int utf8_len, cairo_glyph_t **glyphs, unsigned int *num_glyphs, cairo_text_cluster_t **clusters, unsigned int *num_clusters, cairo_text_cluster_flags_t *cluster_flags
</FUNCTION>
<MACRO>
<NAME>HB_EXTERN</NAME>
#define HB_EXTERN extern
</MACRO>
<MACRO>
<NAME>HB_BEGIN_DECLS</NAME>
#  define HB_BEGIN_DECLS	extern "C" {
</MACRO>
<MACRO>
<NAME>HB_END_DECLS</NAME>
#  define HB_END_DECLS		}
</MACRO>
<TYPEDEF>
<NAME>int8_t</NAME>
typedef __int8 int8_t;
</TYPEDEF>
<TYPEDEF>
<NAME>uint8_t</NAME>
typedef unsigned __int8 uint8_t;
</TYPEDEF>
<TYPEDEF>
<NAME>int16_t</NAME>
typedef __int16 int16_t;
</TYPEDEF>
<TYPEDEF>
<NAME>uint16_t</NAME>
typedef unsigned __int16 uint16_t;
</TYPEDEF>
<TYPEDEF>
<NAME>int32_t</NAME>
typedef __int32 int32_t;
</TYPEDEF>
<TYPEDEF>
<NAME>uint32_t</NAME>
typedef unsigned __int32 uint32_t;
</TYPEDEF>
<TYPEDEF>
<NAME>int64_t</NAME>
typedef __int64 int64_t;
</TYPEDEF>
<TYPEDEF>
<NAME>uint64_t</NAME>
typedef unsigned __int64 uint64_t;
</TYPEDEF>
<MACRO>
<NAME>HB_DEPRECATED</NAME>
#define HB_DEPRECATED __attribute__((__deprecated__))
</MACRO>
<MACRO>
<NAME>HB_DEPRECATED_FOR</NAME>
#define HB_DEPRECATED_FOR(f) __attribute__((__deprecated__("Use '" #f "' instead")))
</MACRO>
<TYPEDEF>
<NAME>hb_bool_t</NAME>
typedef int hb_bool_t;
</TYPEDEF>
<TYPEDEF>
<NAME>hb_codepoint_t</NAME>
typedef uint32_t hb_codepoint_t;
</TYPEDEF>
<MACRO>
<NAME>HB_CODEPOINT_INVALID</NAME>
#define HB_CODEPOINT_INVALID ((hb_codepoint_t) -1)
</MACRO>
<TYPEDEF>
<NAME>hb_position_t</NAME>
typedef int32_t hb_position_t;
</TYPEDEF>
<TYPEDEF>
<NAME>hb_mask_t</NAME>
typedef uint32_t hb_mask_t;
</TYPEDEF>
<UNION>
<NAME>hb_var_int_t</NAME>
typedef union _hb_var_int_t {
  uint32_t u32;
  int32_t i32;
  uint16_t u16[2];
  int16_t i16[2];
  uint8_t u8[4];
  int8_t i8[4];
} hb_var_int_t;
</UNION>
<UNION>
<NAME>hb_var_num_t</NAME>
typedef union _hb_var_num_t {
  float f;
  uint32_t u32;
  int32_t i32;
  uint16_t u16[2];
  int16_t i16[2];
  uint8_t u8[4];
  int8_t i8[4];
} hb_var_num_t;
</UNION>
<TYPEDEF>
<NAME>hb_tag_t</NAME>
typedef uint32_t hb_tag_t;
</TYPEDEF>
<MACRO>
<NAME>HB_TAG</NAME>
#define HB_TAG(c1,c2,c3,c4) ((hb_tag_t)((((uint32_t)(c1)&0xFF)<<24)|(((uint32_t)(c2)&0xFF)<<16)|(((uint32_t)(c3)&0xFF)<<8)|((uint32_t)(c4)&0xFF)))
</MACRO>
<MACRO>
<NAME>HB_UNTAG</NAME>
#define HB_UNTAG(tag)   (uint8_t)(((tag)>>24)&0xFF), (uint8_t)(((tag)>>16)&0xFF), (uint8_t)(((tag)>>8)&0xFF), (uint8_t)((tag)&0xFF)
</MACRO>
<MACRO>
<NAME>HB_TAG_NONE</NAME>
#define HB_TAG_NONE HB_TAG(0,0,0,0)
</MACRO>
<MACRO>
<NAME>HB_TAG_MAX</NAME>
#define HB_TAG_MAX HB_TAG(0xff,0xff,0xff,0xff)
</MACRO>
<MACRO>
<NAME>HB_TAG_MAX_SIGNED</NAME>
#define HB_TAG_MAX_SIGNED HB_TAG(0x7f,0xff,0xff,0xff)
</MACRO>
<FUNCTION>
<NAME>hb_tag_from_string</NAME>
<RETURNS>hb_tag_t</RETURNS>
const char *str, int len
</FUNCTION>
<FUNCTION>
<NAME>hb_tag_to_string</NAME>
<RETURNS>void</RETURNS>
hb_tag_t tag, char *buf
</FUNCTION>
<ENUM>
<NAME>hb_direction_t</NAME>
typedef enum {
  HB_DIRECTION_INVALID = 0,
  HB_DIRECTION_LTR = 4,
  HB_DIRECTION_RTL,
  HB_DIRECTION_TTB,
  HB_DIRECTION_BTT
} hb_direction_t;
</ENUM>
<FUNCTION>
<NAME>hb_direction_from_string</NAME>
<RETURNS>hb_direction_t</RETURNS>
const char *str, int len
</FUNCTION>
<FUNCTION>
<NAME>hb_direction_to_string</NAME>
<RETURNS>const char *</RETURNS>
hb_direction_t direction
</FUNCTION>
<MACRO>
<NAME>HB_DIRECTION_IS_VALID</NAME>
#define HB_DIRECTION_IS_VALID(dir)	((((unsigned int) (dir)) & ~3U) == 4)
</MACRO>
<MACRO>
<NAME>HB_DIRECTION_IS_HORIZONTAL</NAME>
#define HB_DIRECTION_IS_HORIZONTAL(dir)	((((unsigned int) (dir)) & ~1U) == 4)
</MACRO>
<MACRO>
<NAME>HB_DIRECTION_IS_VERTICAL</NAME>
#define HB_DIRECTION_IS_VERTICAL(dir)	((((unsigned int) (dir)) & ~1U) == 6)
</MACRO>
<MACRO>
<NAME>HB_DIRECTION_IS_FORWARD</NAME>
#define HB_DIRECTION_IS_FORWARD(dir)	((((unsigned int) (dir)) & ~2U) == 4)
</MACRO>
<MACRO>
<NAME>HB_DIRECTION_IS_BACKWARD</NAME>
#define HB_DIRECTION_IS_BACKWARD(dir)	((((unsigned int) (dir)) & ~2U) == 5)
</MACRO>
<MACRO>
<NAME>HB_DIRECTION_REVERSE</NAME>
#define HB_DIRECTION_REVERSE(dir)	((hb_direction_t) (((unsigned int) (dir)) ^ 1))
</MACRO>
<TYPEDEF>
<NAME>hb_language_t</NAME>
typedef const struct hb_language_impl_t *hb_language_t;
</TYPEDEF>
<FUNCTION>
<NAME>hb_language_from_string</NAME>
<RETURNS>hb_language_t</RETURNS>
const char *str, int len
</FUNCTION>
<FUNCTION>
<NAME>hb_language_to_string</NAME>
<RETURNS>const char *</RETURNS>
hb_language_t language
</FUNCTION>
<MACRO>
<NAME>HB_LANGUAGE_INVALID</NAME>
#define HB_LANGUAGE_INVALID ((hb_language_t) 0)
</MACRO>
<FUNCTION>
<NAME>hb_language_get_default</NAME>
<RETURNS>hb_language_t</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_language_matches</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_language_t language, hb_language_t specific
</FUNCTION>
<ENUM>
<NAME>hb_script_t</NAME>
typedef enum
{
  HB_SCRIPT_COMMON			= HB_TAG ('Z','y','y','y'), /*1.1*/
  HB_SCRIPT_INHERITED			= HB_TAG ('Z','i','n','h'), /*1.1*/
  HB_SCRIPT_UNKNOWN			= HB_TAG ('Z','z','z','z'), /*5.0*/

  HB_SCRIPT_ARABIC			= HB_TAG ('A','r','a','b'), /*1.1*/
  HB_SCRIPT_ARMENIAN			= HB_TAG ('A','r','m','n'), /*1.1*/
  HB_SCRIPT_BENGALI			= HB_TAG ('B','e','n','g'), /*1.1*/
  HB_SCRIPT_CYRILLIC			= HB_TAG ('C','y','r','l'), /*1.1*/
  HB_SCRIPT_DEVANAGARI			= HB_TAG ('D','e','v','a'), /*1.1*/
  HB_SCRIPT_GEORGIAN			= HB_TAG ('G','e','o','r'), /*1.1*/
  HB_SCRIPT_GREEK			= HB_TAG ('G','r','e','k'), /*1.1*/
  HB_SCRIPT_GUJARATI			= HB_TAG ('G','u','j','r'), /*1.1*/
  HB_SCRIPT_GURMUKHI			= HB_TAG ('G','u','r','u'), /*1.1*/
  HB_SCRIPT_HANGUL			= HB_TAG ('H','a','n','g'), /*1.1*/
  HB_SCRIPT_HAN				= HB_TAG ('H','a','n','i'), /*1.1*/
  HB_SCRIPT_HEBREW			= HB_TAG ('H','e','b','r'), /*1.1*/
  HB_SCRIPT_HIRAGANA			= HB_TAG ('H','i','r','a'), /*1.1*/
  HB_SCRIPT_KANNADA			= HB_TAG ('K','n','d','a'), /*1.1*/
  HB_SCRIPT_KATAKANA			= HB_TAG ('K','a','n','a'), /*1.1*/
  HB_SCRIPT_LAO				= HB_TAG ('L','a','o','o'), /*1.1*/
  HB_SCRIPT_LATIN			= HB_TAG ('L','a','t','n'), /*1.1*/
  HB_SCRIPT_MALAYALAM			= HB_TAG ('M','l','y','m'), /*1.1*/
  HB_SCRIPT_ORIYA			= HB_TAG ('O','r','y','a'), /*1.1*/
  HB_SCRIPT_TAMIL			= HB_TAG ('T','a','m','l'), /*1.1*/
  HB_SCRIPT_TELUGU			= HB_TAG ('T','e','l','u'), /*1.1*/
  HB_SCRIPT_THAI			= HB_TAG ('T','h','a','i'), /*1.1*/

  HB_SCRIPT_TIBETAN			= HB_TAG ('T','i','b','t'), /*2.0*/

  HB_SCRIPT_BOPOMOFO			= HB_TAG ('B','o','p','o'), /*3.0*/
  HB_SCRIPT_BRAILLE			= HB_TAG ('B','r','a','i'), /*3.0*/
  HB_SCRIPT_CANADIAN_SYLLABICS		= HB_TAG ('C','a','n','s'), /*3.0*/
  HB_SCRIPT_CHEROKEE			= HB_TAG ('C','h','e','r'), /*3.0*/
  HB_SCRIPT_ETHIOPIC			= HB_TAG ('E','t','h','i'), /*3.0*/
  HB_SCRIPT_KHMER			= HB_TAG ('K','h','m','r'), /*3.0*/
  HB_SCRIPT_MONGOLIAN			= HB_TAG ('M','o','n','g'), /*3.0*/
  HB_SCRIPT_MYANMAR			= HB_TAG ('M','y','m','r'), /*3.0*/
  HB_SCRIPT_OGHAM			= HB_TAG ('O','g','a','m'), /*3.0*/
  HB_SCRIPT_RUNIC			= HB_TAG ('R','u','n','r'), /*3.0*/
  HB_SCRIPT_SINHALA			= HB_TAG ('S','i','n','h'), /*3.0*/
  HB_SCRIPT_SYRIAC			= HB_TAG ('S','y','r','c'), /*3.0*/
  HB_SCRIPT_THAANA			= HB_TAG ('T','h','a','a'), /*3.0*/
  HB_SCRIPT_YI				= HB_TAG ('Y','i','i','i'), /*3.0*/

  HB_SCRIPT_DESERET			= HB_TAG ('D','s','r','t'), /*3.1*/
  HB_SCRIPT_GOTHIC			= HB_TAG ('G','o','t','h'), /*3.1*/
  HB_SCRIPT_OLD_ITALIC			= HB_TAG ('I','t','a','l'), /*3.1*/

  HB_SCRIPT_BUHID			= HB_TAG ('B','u','h','d'), /*3.2*/
  HB_SCRIPT_HANUNOO			= HB_TAG ('H','a','n','o'), /*3.2*/
  HB_SCRIPT_TAGALOG			= HB_TAG ('T','g','l','g'), /*3.2*/
  HB_SCRIPT_TAGBANWA			= HB_TAG ('T','a','g','b'), /*3.2*/

  HB_SCRIPT_CYPRIOT			= HB_TAG ('C','p','r','t'), /*4.0*/
  HB_SCRIPT_LIMBU			= HB_TAG ('L','i','m','b'), /*4.0*/
  HB_SCRIPT_LINEAR_B			= HB_TAG ('L','i','n','b'), /*4.0*/
  HB_SCRIPT_OSMANYA			= HB_TAG ('O','s','m','a'), /*4.0*/
  HB_SCRIPT_SHAVIAN			= HB_TAG ('S','h','a','w'), /*4.0*/
  HB_SCRIPT_TAI_LE			= HB_TAG ('T','a','l','e'), /*4.0*/
  HB_SCRIPT_UGARITIC			= HB_TAG ('U','g','a','r'), /*4.0*/

  HB_SCRIPT_BUGINESE			= HB_TAG ('B','u','g','i'), /*4.1*/
  HB_SCRIPT_COPTIC			= HB_TAG ('C','o','p','t'), /*4.1*/
  HB_SCRIPT_GLAGOLITIC			= HB_TAG ('G','l','a','g'), /*4.1*/
  HB_SCRIPT_KHAROSHTHI			= HB_TAG ('K','h','a','r'), /*4.1*/
  HB_SCRIPT_NEW_TAI_LUE			= HB_TAG ('T','a','l','u'), /*4.1*/
  HB_SCRIPT_OLD_PERSIAN			= HB_TAG ('X','p','e','o'), /*4.1*/
  HB_SCRIPT_SYLOTI_NAGRI		= HB_TAG ('S','y','l','o'), /*4.1*/
  HB_SCRIPT_TIFINAGH			= HB_TAG ('T','f','n','g'), /*4.1*/

  HB_SCRIPT_BALINESE			= HB_TAG ('B','a','l','i'), /*5.0*/
  HB_SCRIPT_CUNEIFORM			= HB_TAG ('X','s','u','x'), /*5.0*/
  HB_SCRIPT_NKO				= HB_TAG ('N','k','o','o'), /*5.0*/
  HB_SCRIPT_PHAGS_PA			= HB_TAG ('P','h','a','g'), /*5.0*/
  HB_SCRIPT_PHOENICIAN			= HB_TAG ('P','h','n','x'), /*5.0*/

  HB_SCRIPT_CARIAN			= HB_TAG ('C','a','r','i'), /*5.1*/
  HB_SCRIPT_CHAM			= HB_TAG ('C','h','a','m'), /*5.1*/
  HB_SCRIPT_KAYAH_LI			= HB_TAG ('K','a','l','i'), /*5.1*/
  HB_SCRIPT_LEPCHA			= HB_TAG ('L','e','p','c'), /*5.1*/
  HB_SCRIPT_LYCIAN			= HB_TAG ('L','y','c','i'), /*5.1*/
  HB_SCRIPT_LYDIAN			= HB_TAG ('L','y','d','i'), /*5.1*/
  HB_SCRIPT_OL_CHIKI			= HB_TAG ('O','l','c','k'), /*5.1*/
  HB_SCRIPT_REJANG			= HB_TAG ('R','j','n','g'), /*5.1*/
  HB_SCRIPT_SAURASHTRA			= HB_TAG ('S','a','u','r'), /*5.1*/
  HB_SCRIPT_SUNDANESE			= HB_TAG ('S','u','n','d'), /*5.1*/
  HB_SCRIPT_VAI				= HB_TAG ('V','a','i','i'), /*5.1*/

  HB_SCRIPT_AVESTAN			= HB_TAG ('A','v','s','t'), /*5.2*/
  HB_SCRIPT_BAMUM			= HB_TAG ('B','a','m','u'), /*5.2*/
  HB_SCRIPT_EGYPTIAN_HIEROGLYPHS	= HB_TAG ('E','g','y','p'), /*5.2*/
  HB_SCRIPT_IMPERIAL_ARAMAIC		= HB_TAG ('A','r','m','i'), /*5.2*/
  HB_SCRIPT_INSCRIPTIONAL_PAHLAVI	= HB_TAG ('P','h','l','i'), /*5.2*/
  HB_SCRIPT_INSCRIPTIONAL_PARTHIAN	= HB_TAG ('P','r','t','i'), /*5.2*/
  HB_SCRIPT_JAVANESE			= HB_TAG ('J','a','v','a'), /*5.2*/
  HB_SCRIPT_KAITHI			= HB_TAG ('K','t','h','i'), /*5.2*/
  HB_SCRIPT_LISU			= HB_TAG ('L','i','s','u'), /*5.2*/
  HB_SCRIPT_MEETEI_MAYEK		= HB_TAG ('M','t','e','i'), /*5.2*/
  HB_SCRIPT_OLD_SOUTH_ARABIAN		= HB_TAG ('S','a','r','b'), /*5.2*/
  HB_SCRIPT_OLD_TURKIC			= HB_TAG ('O','r','k','h'), /*5.2*/
  HB_SCRIPT_SAMARITAN			= HB_TAG ('S','a','m','r'), /*5.2*/
  HB_SCRIPT_TAI_THAM			= HB_TAG ('L','a','n','a'), /*5.2*/
  HB_SCRIPT_TAI_VIET			= HB_TAG ('T','a','v','t'), /*5.2*/

  HB_SCRIPT_BATAK			= HB_TAG ('B','a','t','k'), /*6.0*/
  HB_SCRIPT_BRAHMI			= HB_TAG ('B','r','a','h'), /*6.0*/
  HB_SCRIPT_MANDAIC			= HB_TAG ('M','a','n','d'), /*6.0*/

  HB_SCRIPT_CHAKMA			= HB_TAG ('C','a','k','m'), /*6.1*/
  HB_SCRIPT_MEROITIC_CURSIVE		= HB_TAG ('M','e','r','c'), /*6.1*/
  HB_SCRIPT_MEROITIC_HIEROGLYPHS	= HB_TAG ('M','e','r','o'), /*6.1*/
  HB_SCRIPT_MIAO			= HB_TAG ('P','l','r','d'), /*6.1*/
  HB_SCRIPT_SHARADA			= HB_TAG ('S','h','r','d'), /*6.1*/
  HB_SCRIPT_SORA_SOMPENG		= HB_TAG ('S','o','r','a'), /*6.1*/
  HB_SCRIPT_TAKRI			= HB_TAG ('T','a','k','r'), /*6.1*/

  /*
   * Since: 0.9.30
   */
  HB_SCRIPT_BASSA_VAH			= HB_TAG ('B','a','s','s'), /*7.0*/
  HB_SCRIPT_CAUCASIAN_ALBANIAN		= HB_TAG ('A','g','h','b'), /*7.0*/
  HB_SCRIPT_DUPLOYAN			= HB_TAG ('D','u','p','l'), /*7.0*/
  HB_SCRIPT_ELBASAN			= HB_TAG ('E','l','b','a'), /*7.0*/
  HB_SCRIPT_GRANTHA			= HB_TAG ('G','r','a','n'), /*7.0*/
  HB_SCRIPT_KHOJKI			= HB_TAG ('K','h','o','j'), /*7.0*/
  HB_SCRIPT_KHUDAWADI			= HB_TAG ('S','i','n','d'), /*7.0*/
  HB_SCRIPT_LINEAR_A			= HB_TAG ('L','i','n','a'), /*7.0*/
  HB_SCRIPT_MAHAJANI			= HB_TAG ('M','a','h','j'), /*7.0*/
  HB_SCRIPT_MANICHAEAN			= HB_TAG ('M','a','n','i'), /*7.0*/
  HB_SCRIPT_MENDE_KIKAKUI		= HB_TAG ('M','e','n','d'), /*7.0*/
  HB_SCRIPT_MODI			= HB_TAG ('M','o','d','i'), /*7.0*/
  HB_SCRIPT_MRO				= HB_TAG ('M','r','o','o'), /*7.0*/
  HB_SCRIPT_NABATAEAN			= HB_TAG ('N','b','a','t'), /*7.0*/
  HB_SCRIPT_OLD_NORTH_ARABIAN		= HB_TAG ('N','a','r','b'), /*7.0*/
  HB_SCRIPT_OLD_PERMIC			= HB_TAG ('P','e','r','m'), /*7.0*/
  HB_SCRIPT_PAHAWH_HMONG		= HB_TAG ('H','m','n','g'), /*7.0*/
  HB_SCRIPT_PALMYRENE			= HB_TAG ('P','a','l','m'), /*7.0*/
  HB_SCRIPT_PAU_CIN_HAU			= HB_TAG ('P','a','u','c'), /*7.0*/
  HB_SCRIPT_PSALTER_PAHLAVI		= HB_TAG ('P','h','l','p'), /*7.0*/
  HB_SCRIPT_SIDDHAM			= HB_TAG ('S','i','d','d'), /*7.0*/
  HB_SCRIPT_TIRHUTA			= HB_TAG ('T','i','r','h'), /*7.0*/
  HB_SCRIPT_WARANG_CITI			= HB_TAG ('W','a','r','a'), /*7.0*/

  HB_SCRIPT_AHOM			= HB_TAG ('A','h','o','m'), /*8.0*/
  HB_SCRIPT_ANATOLIAN_HIEROGLYPHS	= HB_TAG ('H','l','u','w'), /*8.0*/
  HB_SCRIPT_HATRAN			= HB_TAG ('H','a','t','r'), /*8.0*/
  HB_SCRIPT_MULTANI			= HB_TAG ('M','u','l','t'), /*8.0*/
  HB_SCRIPT_OLD_HUNGARIAN		= HB_TAG ('H','u','n','g'), /*8.0*/
  HB_SCRIPT_SIGNWRITING			= HB_TAG ('S','g','n','w'), /*8.0*/

  /*
   * Since 1.3.0
   */
  HB_SCRIPT_ADLAM			= HB_TAG ('A','d','l','m'), /*9.0*/
  HB_SCRIPT_BHAIKSUKI			= HB_TAG ('B','h','k','s'), /*9.0*/
  HB_SCRIPT_MARCHEN			= HB_TAG ('M','a','r','c'), /*9.0*/
  HB_SCRIPT_OSAGE			= HB_TAG ('O','s','g','e'), /*9.0*/
  HB_SCRIPT_TANGUT			= HB_TAG ('T','a','n','g'), /*9.0*/
  HB_SCRIPT_NEWA			= HB_TAG ('N','e','w','a'), /*9.0*/

  /*
   * Since 1.6.0
   */
  HB_SCRIPT_MASARAM_GONDI		= HB_TAG ('G','o','n','m'), /*10.0*/
  HB_SCRIPT_NUSHU			= HB_TAG ('N','s','h','u'), /*10.0*/
  HB_SCRIPT_SOYOMBO			= HB_TAG ('S','o','y','o'), /*10.0*/
  HB_SCRIPT_ZANABAZAR_SQUARE		= HB_TAG ('Z','a','n','b'), /*10.0*/

  /*
   * Since 1.8.0
   */
  HB_SCRIPT_DOGRA			= HB_TAG ('D','o','g','r'), /*11.0*/
  HB_SCRIPT_GUNJALA_GONDI		= HB_TAG ('G','o','n','g'), /*11.0*/
  HB_SCRIPT_HANIFI_ROHINGYA		= HB_TAG ('R','o','h','g'), /*11.0*/
  HB_SCRIPT_MAKASAR			= HB_TAG ('M','a','k','a'), /*11.0*/
  HB_SCRIPT_MEDEFAIDRIN			= HB_TAG ('M','e','d','f'), /*11.0*/
  HB_SCRIPT_OLD_SOGDIAN			= HB_TAG ('S','o','g','o'), /*11.0*/
  HB_SCRIPT_SOGDIAN			= HB_TAG ('S','o','g','d'), /*11.0*/

  /*
   * Since 2.4.0
   */
  HB_SCRIPT_ELYMAIC			= HB_TAG ('E','l','y','m'), /*12.0*/
  HB_SCRIPT_NANDINAGARI			= HB_TAG ('N','a','n','d'), /*12.0*/
  HB_SCRIPT_NYIAKENG_PUACHUE_HMONG	= HB_TAG ('H','m','n','p'), /*12.0*/
  HB_SCRIPT_WANCHO			= HB_TAG ('W','c','h','o'), /*12.0*/

  /*
   * Since 2.6.7
   */
  HB_SCRIPT_CHORASMIAN			= HB_TAG ('C','h','r','s'), /*13.0*/
  HB_SCRIPT_DIVES_AKURU			= HB_TAG ('D','i','a','k'), /*13.0*/
  HB_SCRIPT_KHITAN_SMALL_SCRIPT		= HB_TAG ('K','i','t','s'), /*13.0*/
  HB_SCRIPT_YEZIDI			= HB_TAG ('Y','e','z','i'), /*13.0*/

  /*
   * Since 3.0.0
   */
  HB_SCRIPT_CYPRO_MINOAN		= HB_TAG ('C','p','m','n'), /*14.0*/
  HB_SCRIPT_OLD_UYGHUR			= HB_TAG ('O','u','g','r'), /*14.0*/
  HB_SCRIPT_TANGSA			= HB_TAG ('T','n','s','a'), /*14.0*/
  HB_SCRIPT_TOTO			= HB_TAG ('T','o','t','o'), /*14.0*/
  HB_SCRIPT_VITHKUQI			= HB_TAG ('V','i','t','h'), /*14.0*/

  /*
   * Since 3.4.0
   */
  HB_SCRIPT_MATH			= HB_TAG ('Z','m','t','h'),

  /*
   * Since 5.2.0
   */
  HB_SCRIPT_KAWI			= HB_TAG ('K','a','w','i'), /*15.0*/
  HB_SCRIPT_NAG_MUNDARI			= HB_TAG ('N','a','g','m'), /*15.0*/

  /* No script set. */
  HB_SCRIPT_INVALID			= HB_TAG_NONE,

  /*< private >*/

  /* Dummy values to ensure any hb_tag_t value can be passed/stored as hb_script_t
   * without risking undefined behavior.  We have two, for historical reasons.
   * HB_TAG_MAX used to be unsigned, but that was invalid Ansi C, so was changed
   * to _HB_SCRIPT_MAX_VALUE to be equal to HB_TAG_MAX_SIGNED as well.
   *
   * See this thread for technicalities:
   *
   *   https://lists.freedesktop.org/archives/harfbuzz/2014-March/004150.html
   */
  _HB_SCRIPT_MAX_VALUE				= HB_TAG_MAX_SIGNED, /*< skip >*/
  _HB_SCRIPT_MAX_VALUE_SIGNED			= HB_TAG_MAX_SIGNED /*< skip >*/

} hb_script_t;
</ENUM>
<FUNCTION>
<NAME>hb_script_from_iso15924_tag</NAME>
<RETURNS>hb_script_t</RETURNS>
hb_tag_t tag
</FUNCTION>
<FUNCTION>
<NAME>hb_script_from_string</NAME>
<RETURNS>hb_script_t</RETURNS>
const char *str, int len
</FUNCTION>
<FUNCTION>
<NAME>hb_script_to_iso15924_tag</NAME>
<RETURNS>hb_tag_t</RETURNS>
hb_script_t script
</FUNCTION>
<FUNCTION>
<NAME>hb_script_get_horizontal_direction</NAME>
<RETURNS>hb_direction_t</RETURNS>
hb_script_t script
</FUNCTION>
<STRUCT>
<NAME>hb_user_data_key_t</NAME>
typedef struct hb_user_data_key_t {
  /*< private >*/
  char unused;
} hb_user_data_key_t;
</STRUCT>
<USER_FUNCTION>
<NAME>hb_destroy_func_t</NAME>
<RETURNS>void</RETURNS>
void *user_data
</USER_FUNCTION>
<MACRO>
<NAME>HB_FEATURE_GLOBAL_START</NAME>
#define HB_FEATURE_GLOBAL_START	0
</MACRO>
<MACRO>
<NAME>HB_FEATURE_GLOBAL_END</NAME>
#define HB_FEATURE_GLOBAL_END	((unsigned int) -1)
</MACRO>
<STRUCT>
<NAME>hb_feature_t</NAME>
typedef struct hb_feature_t {
  hb_tag_t      tag;
  uint32_t      value;
  unsigned int  start;
  unsigned int  end;
} hb_feature_t;
</STRUCT>
<FUNCTION>
<NAME>hb_feature_from_string</NAME>
<RETURNS>hb_bool_t</RETURNS>
const char *str, int len, hb_feature_t *feature
</FUNCTION>
<FUNCTION>
<NAME>hb_feature_to_string</NAME>
<RETURNS>void</RETURNS>
hb_feature_t *feature, char *buf, unsigned int size
</FUNCTION>
<STRUCT>
<NAME>hb_variation_t</NAME>
typedef struct hb_variation_t {
  hb_tag_t tag;
  float    value;
} hb_variation_t;
</STRUCT>
<FUNCTION>
<NAME>hb_variation_from_string</NAME>
<RETURNS>hb_bool_t</RETURNS>
const char *str, int len, hb_variation_t *variation
</FUNCTION>
<FUNCTION>
<NAME>hb_variation_to_string</NAME>
<RETURNS>void</RETURNS>
hb_variation_t *variation, char *buf, unsigned int size
</FUNCTION>
<TYPEDEF>
<NAME>hb_color_t</NAME>
typedef uint32_t hb_color_t;
</TYPEDEF>
<MACRO>
<NAME>HB_COLOR</NAME>
#define HB_COLOR(b,g,r,a) ((hb_color_t) HB_TAG ((b),(g),(r),(a)))
</MACRO>
<FUNCTION>
<NAME>hb_color_get_alpha</NAME>
<RETURNS>uint8_t</RETURNS>
hb_color_t color
</FUNCTION>
<FUNCTION>
<NAME>hb_color_get_red</NAME>
<RETURNS>uint8_t</RETURNS>
hb_color_t color
</FUNCTION>
<FUNCTION>
<NAME>hb_color_get_green</NAME>
<RETURNS>uint8_t</RETURNS>
hb_color_t color
</FUNCTION>
<FUNCTION>
<NAME>hb_color_get_blue</NAME>
<RETURNS>uint8_t</RETURNS>
hb_color_t color
</FUNCTION>
<STRUCT>
<NAME>hb_glyph_extents_t</NAME>
typedef struct hb_glyph_extents_t {
  hb_position_t x_bearing;
  hb_position_t y_bearing;
  hb_position_t width;
  hb_position_t height;
} hb_glyph_extents_t;
</STRUCT>
<TYPEDEF>
<NAME>hb_font_t</NAME>
typedef struct hb_font_t hb_font_t;
</TYPEDEF>
<MACRO>
<NAME>HB_CORETEXT_TAG_MORT</NAME>
#define HB_CORETEXT_TAG_MORT HB_TAG('m','o','r','t')
</MACRO>
<MACRO>
<NAME>HB_CORETEXT_TAG_MORX</NAME>
#define HB_CORETEXT_TAG_MORX HB_TAG('m','o','r','x')
</MACRO>
<MACRO>
<NAME>HB_CORETEXT_TAG_KERX</NAME>
#define HB_CORETEXT_TAG_KERX HB_TAG('k','e','r','x')
</MACRO>
<FUNCTION>
<NAME>hb_coretext_face_create</NAME>
<RETURNS>hb_face_t *</RETURNS>
CGFontRef cg_font
</FUNCTION>
<FUNCTION>
<NAME>hb_coretext_font_create</NAME>
<RETURNS>hb_font_t *</RETURNS>
CTFontRef ct_font
</FUNCTION>
<FUNCTION>
<NAME>hb_coretext_face_get_cg_font</NAME>
<RETURNS>CGFontRef</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_coretext_font_get_ct_font</NAME>
<RETURNS>CTFontRef</RETURNS>
hb_font_t *font
</FUNCTION>
<MACRO>
<NAME>HB_SCRIPT_CANADIAN_ABORIGINAL</NAME>
<DEPRECATED/>
#define HB_SCRIPT_CANADIAN_ABORIGINAL		HB_SCRIPT_CANADIAN_SYLLABICS
</MACRO>
<MACRO>
<NAME>HB_BUFFER_FLAGS_DEFAULT</NAME>
<DEPRECATED/>
#define HB_BUFFER_FLAGS_DEFAULT			HB_BUFFER_FLAG_DEFAULT
</MACRO>
<MACRO>
<NAME>HB_BUFFER_SERIALIZE_FLAGS_DEFAULT</NAME>
<DEPRECATED/>
#define HB_BUFFER_SERIALIZE_FLAGS_DEFAULT	HB_BUFFER_SERIALIZE_FLAG_DEFAULT
</MACRO>
<USER_FUNCTION>
<NAME>hb_font_get_glyph_func_t</NAME>
<DEPRECATED/>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, void *font_data, hb_codepoint_t unicode, hb_codepoint_t variation_selector, hb_codepoint_t *glyph, void *user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_glyph_func</NAME>
<DEPRECATED/>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_glyph_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<MACRO>
<NAME>HB_UNICODE_COMBINING_CLASS_CCC133</NAME>
<DEPRECATED/>
#define HB_UNICODE_COMBINING_CLASS_CCC133 133
</MACRO>
<USER_FUNCTION>
<NAME>hb_unicode_eastasian_width_func_t</NAME>
<DEPRECATED/>
<RETURNS>unsigned int</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_codepoint_t      unicode, void               *user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>hb_unicode_funcs_set_eastasian_width_func</NAME>
<DEPRECATED/>
<RETURNS>void</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_unicode_eastasian_width_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_eastasian_width</NAME>
<DEPRECATED/>
<RETURNS>unsigned int</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode
</FUNCTION>
<USER_FUNCTION>
<NAME>hb_unicode_decompose_compatibility_func_t</NAME>
<DEPRECATED/>
<RETURNS>unsigned int</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_codepoint_t      u, hb_codepoint_t     *decomposed, void               *user_data
</USER_FUNCTION>
<MACRO>
<NAME>HB_UNICODE_MAX_DECOMPOSITION_LEN</NAME>
<DEPRECATED/>
#define HB_UNICODE_MAX_DECOMPOSITION_LEN (18+1) /* codepoints */
</MACRO>
<FUNCTION>
<NAME>hb_unicode_funcs_set_decompose_compatibility_func</NAME>
<DEPRECATED/>
<RETURNS>void</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_unicode_decompose_compatibility_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_decompose_compatibility</NAME>
<DEPRECATED/>
<RETURNS>unsigned int</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_codepoint_t      u, hb_codepoint_t     *decomposed
</FUNCTION>
<TYPEDEF>
<NAME>hb_font_get_glyph_v_kerning_func_t</NAME>
<DEPRECATED/>
typedef hb_font_get_glyph_kerning_func_t hb_font_get_glyph_v_kerning_func_t;
</TYPEDEF>
<FUNCTION>
<NAME>hb_font_funcs_set_glyph_v_kerning_func</NAME>
<DEPRECATED/>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_glyph_v_kerning_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_v_kerning</NAME>
<DEPRECATED/>
<RETURNS>hb_position_t</RETURNS>
hb_font_t *font, hb_codepoint_t top_glyph, hb_codepoint_t bottom_glyph
</FUNCTION>
<USER_FUNCTION>
<NAME>hb_font_get_glyph_shape_func_t</NAME>
<DEPRECATED/>
<RETURNS>void</RETURNS>
hb_font_t *font, void *font_data, hb_codepoint_t glyph, hb_draw_funcs_t *draw_funcs, void *draw_data, void *user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_glyph_shape_func</NAME>
<DEPRECATED/>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_glyph_shape_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_shape</NAME>
<DEPRECATED/>
<RETURNS>void</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, hb_draw_funcs_t *dfuncs, void *draw_data
</FUNCTION>
<FUNCTION>
<NAME>hb_directwrite_face_create</NAME>
<RETURNS>hb_face_t *</RETURNS>
IDWriteFontFace *font_face
</FUNCTION>
<FUNCTION>
<NAME>hb_directwrite_face_get_font_face</NAME>
<RETURNS>IDWriteFontFace *</RETURNS>
hb_face_t *face
</FUNCTION>
<STRUCT>
<NAME>hb_draw_state_t</NAME>
typedef struct hb_draw_state_t {
  hb_bool_t path_open;

  float path_start_x;
  float path_start_y;

  float current_x;
  float current_y;

  /*< private >*/
  hb_var_num_t   reserved1;
  hb_var_num_t   reserved2;
  hb_var_num_t   reserved3;
  hb_var_num_t   reserved4;
  hb_var_num_t   reserved5;
  hb_var_num_t   reserved6;
  hb_var_num_t   reserved7;
} hb_draw_state_t;
</STRUCT>
<MACRO>
<NAME>HB_DRAW_STATE_DEFAULT</NAME>
#define HB_DRAW_STATE_DEFAULT {0, 0.f, 0.f, 0.f, 0.f, {0.}, {0.}, {0.}}
</MACRO>
<TYPEDEF>
<NAME>hb_draw_funcs_t</NAME>
typedef struct hb_draw_funcs_t hb_draw_funcs_t;
</TYPEDEF>
<USER_FUNCTION>
<NAME>hb_draw_move_to_func_t</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float to_x, float to_y, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_draw_line_to_func_t</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float to_x, float to_y, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_draw_quadratic_to_func_t</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float control_x, float control_y, float to_x, float to_y, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_draw_cubic_to_func_t</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float control1_x, float control1_y, float control2_x, float control2_y, float to_x, float to_y, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_draw_close_path_func_t</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, void *user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>hb_draw_funcs_set_move_to_func</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t        *dfuncs, hb_draw_move_to_func_t  func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_funcs_set_line_to_func</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t        *dfuncs, hb_draw_line_to_func_t  func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_funcs_set_quadratic_to_func</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t             *dfuncs, hb_draw_quadratic_to_func_t  func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_funcs_set_cubic_to_func</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t         *dfuncs, hb_draw_cubic_to_func_t  func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_funcs_set_close_path_func</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t           *dfuncs, hb_draw_close_path_func_t  func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_funcs_create</NAME>
<RETURNS>hb_draw_funcs_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_funcs_get_empty</NAME>
<RETURNS>hb_draw_funcs_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_funcs_reference</NAME>
<RETURNS>hb_draw_funcs_t *</RETURNS>
hb_draw_funcs_t *dfuncs
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_funcs_destroy</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t *dfuncs
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_funcs_set_user_data</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_draw_funcs_t *dfuncs, hb_user_data_key_t *key, void *              data, hb_destroy_func_t   destroy, hb_bool_t           replace
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_funcs_get_user_data</NAME>
<RETURNS>void *</RETURNS>
const hb_draw_funcs_t *dfuncs, hb_user_data_key_t       *key
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_funcs_make_immutable</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t *dfuncs
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_funcs_is_immutable</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_draw_funcs_t *dfuncs
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_move_to</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float to_x, float to_y
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_line_to</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float to_x, float to_y
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_quadratic_to</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float control_x, float control_y, float to_x, float to_y
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_cubic_to</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float control1_x, float control1_y, float control2_x, float control2_y, float to_x, float to_y
</FUNCTION>
<FUNCTION>
<NAME>hb_draw_close_path</NAME>
<RETURNS>void</RETURNS>
hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st
</FUNCTION>
<FUNCTION>
<NAME>hb_face_count</NAME>
<RETURNS>unsigned int</RETURNS>
hb_blob_t *blob
</FUNCTION>
<TYPEDEF>
<NAME>hb_face_t</NAME>
typedef struct hb_face_t hb_face_t;
</TYPEDEF>
<FUNCTION>
<NAME>hb_face_create</NAME>
<RETURNS>hb_face_t *</RETURNS>
hb_blob_t    *blob, unsigned int  index
</FUNCTION>
<USER_FUNCTION>
<NAME>hb_reference_table_func_t</NAME>
<RETURNS>hb_blob_t *</RETURNS>
hb_face_t *face, hb_tag_t tag, void *user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>hb_face_create_for_tables</NAME>
<RETURNS>hb_face_t *</RETURNS>
hb_reference_table_func_t  reference_table_func, void                      *user_data, hb_destroy_func_t          destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_face_get_empty</NAME>
<RETURNS>hb_face_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_face_reference</NAME>
<RETURNS>hb_face_t *</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_face_destroy</NAME>
<RETURNS>void</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_face_set_user_data</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t          *face, hb_user_data_key_t *key, void *              data, hb_destroy_func_t   destroy, hb_bool_t           replace
</FUNCTION>
<FUNCTION>
<NAME>hb_face_get_user_data</NAME>
<RETURNS>void *</RETURNS>
const hb_face_t    *face, hb_user_data_key_t *key
</FUNCTION>
<FUNCTION>
<NAME>hb_face_make_immutable</NAME>
<RETURNS>void</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_face_is_immutable</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_face_reference_table</NAME>
<RETURNS>hb_blob_t *</RETURNS>
const hb_face_t *face, hb_tag_t tag
</FUNCTION>
<FUNCTION>
<NAME>hb_face_reference_blob</NAME>
<RETURNS>hb_blob_t *</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_face_set_index</NAME>
<RETURNS>void</RETURNS>
hb_face_t    *face, unsigned int  index
</FUNCTION>
<FUNCTION>
<NAME>hb_face_get_index</NAME>
<RETURNS>unsigned int</RETURNS>
const hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_face_set_upem</NAME>
<RETURNS>void</RETURNS>
hb_face_t    *face, unsigned int  upem
</FUNCTION>
<FUNCTION>
<NAME>hb_face_get_upem</NAME>
<RETURNS>unsigned int</RETURNS>
const hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_face_set_glyph_count</NAME>
<RETURNS>void</RETURNS>
hb_face_t    *face, unsigned int  glyph_count
</FUNCTION>
<FUNCTION>
<NAME>hb_face_get_glyph_count</NAME>
<RETURNS>unsigned int</RETURNS>
const hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_face_get_table_tags</NAME>
<RETURNS>unsigned int</RETURNS>
const hb_face_t *face, unsigned int  start_offset, unsigned int *table_count, hb_tag_t     *table_tags
</FUNCTION>
<FUNCTION>
<NAME>hb_face_collect_unicodes</NAME>
<RETURNS>void</RETURNS>
hb_face_t *face, hb_set_t  *out
</FUNCTION>
<FUNCTION>
<NAME>hb_face_collect_nominal_glyph_mapping</NAME>
<RETURNS>void</RETURNS>
hb_face_t *face, hb_map_t  *mapping, hb_set_t  *unicodes
</FUNCTION>
<FUNCTION>
<NAME>hb_face_collect_variation_selectors</NAME>
<RETURNS>void</RETURNS>
hb_face_t *face, hb_set_t  *out
</FUNCTION>
<FUNCTION>
<NAME>hb_face_collect_variation_unicodes</NAME>
<RETURNS>void</RETURNS>
hb_face_t *face, hb_codepoint_t variation_selector, hb_set_t  *out
</FUNCTION>
<FUNCTION>
<NAME>hb_face_builder_create</NAME>
<RETURNS>hb_face_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_face_builder_add_table</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t *face, hb_tag_t   tag, hb_blob_t *blob
</FUNCTION>
<FUNCTION>
<NAME>hb_face_builder_sort_tables</NAME>
<RETURNS>void</RETURNS>
hb_face_t *face, const hb_tag_t  *tags
</FUNCTION>
<TYPEDEF>
<NAME>hb_font_funcs_t</NAME>
typedef struct hb_font_funcs_t hb_font_funcs_t;
</TYPEDEF>
<FUNCTION>
<NAME>hb_font_funcs_create</NAME>
<RETURNS>hb_font_funcs_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_get_empty</NAME>
<RETURNS>hb_font_funcs_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_reference</NAME>
<RETURNS>hb_font_funcs_t *</RETURNS>
hb_font_funcs_t *ffuncs
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_destroy</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_user_data</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_funcs_t    *ffuncs, hb_user_data_key_t *key, void *              data, hb_destroy_func_t   destroy, hb_bool_t           replace
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_get_user_data</NAME>
<RETURNS>void *</RETURNS>
const hb_font_funcs_t *ffuncs, hb_user_data_key_t    *key
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_make_immutable</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_is_immutable</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_funcs_t *ffuncs
</FUNCTION>
<STRUCT>
<NAME>hb_font_extents_t</NAME>
typedef struct hb_font_extents_t {
  hb_position_t ascender;
  hb_position_t descender;
  hb_position_t line_gap;
  /*< private >*/
  hb_position_t reserved9;
  hb_position_t reserved8;
  hb_position_t reserved7;
  hb_position_t reserved6;
  hb_position_t reserved5;
  hb_position_t reserved4;
  hb_position_t reserved3;
  hb_position_t reserved2;
  hb_position_t reserved1;
} hb_font_extents_t;
</STRUCT>
<USER_FUNCTION>
<NAME>hb_font_get_font_extents_func_t</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, void *font_data, hb_font_extents_t *extents, void *user_data
</USER_FUNCTION>
<TYPEDEF>
<NAME>hb_font_get_font_h_extents_func_t</NAME>
typedef hb_font_get_font_extents_func_t hb_font_get_font_h_extents_func_t;
</TYPEDEF>
<TYPEDEF>
<NAME>hb_font_get_font_v_extents_func_t</NAME>
typedef hb_font_get_font_extents_func_t hb_font_get_font_v_extents_func_t;
</TYPEDEF>
<USER_FUNCTION>
<NAME>hb_font_get_nominal_glyph_func_t</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, void *font_data, hb_codepoint_t unicode, hb_codepoint_t *glyph, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_font_get_variation_glyph_func_t</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, void *font_data, hb_codepoint_t unicode, hb_codepoint_t variation_selector, hb_codepoint_t *glyph, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_font_get_nominal_glyphs_func_t</NAME>
<RETURNS>unsigned int</RETURNS>
hb_font_t *font, void *font_data, unsigned int count, const hb_codepoint_t *first_unicode, unsigned int unicode_stride, hb_codepoint_t *first_glyph, unsigned int glyph_stride, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_font_get_glyph_advance_func_t</NAME>
<RETURNS>hb_position_t</RETURNS>
hb_font_t *font, void *font_data, hb_codepoint_t glyph, void *user_data
</USER_FUNCTION>
<TYPEDEF>
<NAME>hb_font_get_glyph_h_advance_func_t</NAME>
typedef hb_font_get_glyph_advance_func_t hb_font_get_glyph_h_advance_func_t;
</TYPEDEF>
<TYPEDEF>
<NAME>hb_font_get_glyph_v_advance_func_t</NAME>
typedef hb_font_get_glyph_advance_func_t hb_font_get_glyph_v_advance_func_t;
</TYPEDEF>
<USER_FUNCTION>
<NAME>hb_font_get_glyph_advances_func_t</NAME>
<RETURNS>void</RETURNS>
hb_font_t* font, void* font_data, unsigned int count, const hb_codepoint_t *first_glyph, unsigned glyph_stride, hb_position_t *first_advance, unsigned advance_stride, void *user_data
</USER_FUNCTION>
<TYPEDEF>
<NAME>hb_font_get_glyph_h_advances_func_t</NAME>
typedef hb_font_get_glyph_advances_func_t hb_font_get_glyph_h_advances_func_t;
</TYPEDEF>
<TYPEDEF>
<NAME>hb_font_get_glyph_v_advances_func_t</NAME>
typedef hb_font_get_glyph_advances_func_t hb_font_get_glyph_v_advances_func_t;
</TYPEDEF>
<USER_FUNCTION>
<NAME>hb_font_get_glyph_origin_func_t</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, void *font_data, hb_codepoint_t glyph, hb_position_t *x, hb_position_t *y, void *user_data
</USER_FUNCTION>
<TYPEDEF>
<NAME>hb_font_get_glyph_h_origin_func_t</NAME>
typedef hb_font_get_glyph_origin_func_t hb_font_get_glyph_h_origin_func_t;
</TYPEDEF>
<TYPEDEF>
<NAME>hb_font_get_glyph_v_origin_func_t</NAME>
typedef hb_font_get_glyph_origin_func_t hb_font_get_glyph_v_origin_func_t;
</TYPEDEF>
<USER_FUNCTION>
<NAME>hb_font_get_glyph_kerning_func_t</NAME>
<RETURNS>hb_position_t</RETURNS>
hb_font_t *font, void *font_data, hb_codepoint_t first_glyph, hb_codepoint_t second_glyph, void *user_data
</USER_FUNCTION>
<TYPEDEF>
<NAME>hb_font_get_glyph_h_kerning_func_t</NAME>
typedef hb_font_get_glyph_kerning_func_t hb_font_get_glyph_h_kerning_func_t;
</TYPEDEF>
<USER_FUNCTION>
<NAME>hb_font_get_glyph_extents_func_t</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, void *font_data, hb_codepoint_t glyph, hb_glyph_extents_t *extents, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_font_get_glyph_contour_point_func_t</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, void *font_data, hb_codepoint_t glyph, unsigned int point_index, hb_position_t *x, hb_position_t *y, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_font_get_glyph_name_func_t</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, void *font_data, hb_codepoint_t glyph, char *name, unsigned int size, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_font_get_glyph_from_name_func_t</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, void *font_data, const char *name, int len, hb_codepoint_t *glyph, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_font_draw_glyph_func_t</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, void *font_data, hb_codepoint_t glyph, hb_draw_funcs_t *draw_funcs, void *draw_data, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_font_paint_glyph_func_t</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, void *font_data, hb_codepoint_t glyph, hb_paint_funcs_t *paint_funcs, void *paint_data, unsigned int palette_index, hb_color_t foreground, void *user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_font_h_extents_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_font_h_extents_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_font_v_extents_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_font_v_extents_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_nominal_glyph_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_nominal_glyph_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_nominal_glyphs_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_nominal_glyphs_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_variation_glyph_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_variation_glyph_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_glyph_h_advance_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_glyph_h_advance_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_glyph_v_advance_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_glyph_v_advance_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_glyph_h_advances_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_glyph_h_advances_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_glyph_v_advances_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_glyph_v_advances_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_glyph_h_origin_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_glyph_h_origin_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_glyph_v_origin_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_glyph_v_origin_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_glyph_h_kerning_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_glyph_h_kerning_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_glyph_extents_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_glyph_extents_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_glyph_contour_point_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_glyph_contour_point_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_glyph_name_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_glyph_name_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_glyph_from_name_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_get_glyph_from_name_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_draw_glyph_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_draw_glyph_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_funcs_set_paint_glyph_func</NAME>
<RETURNS>void</RETURNS>
hb_font_funcs_t *ffuncs, hb_font_paint_glyph_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_h_extents</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, hb_font_extents_t *extents
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_v_extents</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, hb_font_extents_t *extents
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_nominal_glyph</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, hb_codepoint_t unicode, hb_codepoint_t *glyph
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_variation_glyph</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, hb_codepoint_t unicode, hb_codepoint_t variation_selector, hb_codepoint_t *glyph
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_nominal_glyphs</NAME>
<RETURNS>unsigned int</RETURNS>
hb_font_t *font, unsigned int count, const hb_codepoint_t *first_unicode, unsigned int unicode_stride, hb_codepoint_t *first_glyph, unsigned int glyph_stride
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_h_advance</NAME>
<RETURNS>hb_position_t</RETURNS>
hb_font_t *font, hb_codepoint_t glyph
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_v_advance</NAME>
<RETURNS>hb_position_t</RETURNS>
hb_font_t *font, hb_codepoint_t glyph
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_h_advances</NAME>
<RETURNS>void</RETURNS>
hb_font_t* font, unsigned int count, const hb_codepoint_t *first_glyph, unsigned glyph_stride, hb_position_t *first_advance, unsigned advance_stride
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_v_advances</NAME>
<RETURNS>void</RETURNS>
hb_font_t* font, unsigned int count, const hb_codepoint_t *first_glyph, unsigned glyph_stride, hb_position_t *first_advance, unsigned advance_stride
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_h_origin</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, hb_position_t *x, hb_position_t *y
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_v_origin</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, hb_position_t *x, hb_position_t *y
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_h_kerning</NAME>
<RETURNS>hb_position_t</RETURNS>
hb_font_t *font, hb_codepoint_t left_glyph, hb_codepoint_t right_glyph
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_extents</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, hb_glyph_extents_t *extents
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_contour_point</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, unsigned int point_index, hb_position_t *x, hb_position_t *y
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_name</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, char *name, unsigned int size
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_from_name</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, const char *name, int len, hb_codepoint_t *glyph
</FUNCTION>
<FUNCTION>
<NAME>hb_font_draw_glyph</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, hb_draw_funcs_t *dfuncs, void *draw_data
</FUNCTION>
<FUNCTION>
<NAME>hb_font_paint_glyph</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, hb_paint_funcs_t *pfuncs, void *paint_data, unsigned int palette_index, hb_color_t foreground
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, hb_codepoint_t unicode, hb_codepoint_t variation_selector, hb_codepoint_t *glyph
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_extents_for_direction</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, hb_direction_t direction, hb_font_extents_t *extents
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_advance_for_direction</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_advances_for_direction</NAME>
<RETURNS>void</RETURNS>
hb_font_t* font, hb_direction_t direction, unsigned int count, const hb_codepoint_t *first_glyph, unsigned glyph_stride, hb_position_t *first_advance, unsigned advance_stride
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_origin_for_direction</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y
</FUNCTION>
<FUNCTION>
<NAME>hb_font_add_glyph_origin_for_direction</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y
</FUNCTION>
<FUNCTION>
<NAME>hb_font_subtract_glyph_origin_for_direction</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_kerning_for_direction</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, hb_codepoint_t first_glyph, hb_codepoint_t second_glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_extents_for_origin</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_glyph_extents_t *extents
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_glyph_contour_point_for_origin</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, unsigned int point_index, hb_direction_t direction, hb_position_t *x, hb_position_t *y
</FUNCTION>
<FUNCTION>
<NAME>hb_font_glyph_to_string</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, char *s, unsigned int size
</FUNCTION>
<FUNCTION>
<NAME>hb_font_glyph_from_string</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font, const char *s, int len, hb_codepoint_t *glyph
</FUNCTION>
<FUNCTION>
<NAME>hb_font_create</NAME>
<RETURNS>hb_font_t *</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_font_create_sub_font</NAME>
<RETURNS>hb_font_t *</RETURNS>
hb_font_t *parent
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_empty</NAME>
<RETURNS>hb_font_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_font_reference</NAME>
<RETURNS>hb_font_t *</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_font_destroy</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_font_set_user_data</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t          *font, hb_user_data_key_t *key, void *              data, hb_destroy_func_t   destroy, hb_bool_t           replace
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_user_data</NAME>
<RETURNS>void *</RETURNS>
const hb_font_t    *font, hb_user_data_key_t *key
</FUNCTION>
<FUNCTION>
<NAME>hb_font_make_immutable</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_font_is_immutable</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_serial</NAME>
<RETURNS>unsigned int</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_font_changed</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_font_set_parent</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, hb_font_t *parent
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_parent</NAME>
<RETURNS>hb_font_t *</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_font_set_face</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_face</NAME>
<RETURNS>hb_face_t *</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_font_set_funcs</NAME>
<RETURNS>void</RETURNS>
hb_font_t         *font, hb_font_funcs_t   *klass, void              *font_data, hb_destroy_func_t  destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_set_funcs_data</NAME>
<RETURNS>void</RETURNS>
hb_font_t         *font, void              *font_data, hb_destroy_func_t  destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_font_set_scale</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, int x_scale, int y_scale
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_scale</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, int *x_scale, int *y_scale
</FUNCTION>
<FUNCTION>
<NAME>hb_font_set_ppem</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, unsigned int x_ppem, unsigned int y_ppem
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_ppem</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, unsigned int *x_ppem, unsigned int *y_ppem
</FUNCTION>
<FUNCTION>
<NAME>hb_font_set_ptem</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, float ptem
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_ptem</NAME>
<RETURNS>float</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_font_set_synthetic_bold</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, float x_embolden, float y_embolden, hb_bool_t in_place
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_synthetic_bold</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, float *x_embolden, float *y_embolden, hb_bool_t *in_place
</FUNCTION>
<FUNCTION>
<NAME>hb_font_set_synthetic_slant</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, float slant
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_synthetic_slant</NAME>
<RETURNS>float</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_font_set_variations</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, const hb_variation_t *variations, unsigned int variations_length
</FUNCTION>
<FUNCTION>
<NAME>hb_font_set_variation</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, hb_tag_t tag, float    value
</FUNCTION>
<FUNCTION>
<NAME>hb_font_set_var_coords_design</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, const float *coords, unsigned int coords_length
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_var_coords_design</NAME>
<RETURNS>const float *</RETURNS>
hb_font_t *font, unsigned int *length
</FUNCTION>
<FUNCTION>
<NAME>hb_font_set_var_coords_normalized</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, const int *coords, unsigned int coords_length
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_var_coords_normalized</NAME>
<RETURNS>const int *</RETURNS>
hb_font_t *font, unsigned int *length
</FUNCTION>
<MACRO>
<NAME>HB_FONT_NO_VAR_NAMED_INSTANCE</NAME>
#define HB_FONT_NO_VAR_NAMED_INSTANCE 0xFFFFFFFF
</MACRO>
<FUNCTION>
<NAME>hb_font_set_var_named_instance</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, unsigned int instance_index
</FUNCTION>
<FUNCTION>
<NAME>hb_font_get_var_named_instance</NAME>
<RETURNS>unsigned int</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_ft_face_create</NAME>
<RETURNS>hb_face_t *</RETURNS>
FT_Face           ft_face, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_ft_face_create_cached</NAME>
<RETURNS>hb_face_t *</RETURNS>
FT_Face ft_face
</FUNCTION>
<FUNCTION>
<NAME>hb_ft_face_create_referenced</NAME>
<RETURNS>hb_face_t *</RETURNS>
FT_Face ft_face
</FUNCTION>
<FUNCTION>
<NAME>hb_ft_font_create</NAME>
<RETURNS>hb_font_t *</RETURNS>
FT_Face           ft_face, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_ft_font_create_referenced</NAME>
<RETURNS>hb_font_t *</RETURNS>
FT_Face ft_face
</FUNCTION>
<FUNCTION>
<NAME>hb_ft_font_get_face</NAME>
<RETURNS>FT_Face</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_ft_font_lock_face</NAME>
<RETURNS>FT_Face</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_ft_font_unlock_face</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_ft_font_set_load_flags</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font, int load_flags
</FUNCTION>
<FUNCTION>
<NAME>hb_ft_font_get_load_flags</NAME>
<RETURNS>int</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_ft_font_changed</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_ft_hb_font_changed</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_ft_font_set_funcs</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_gdi_face_create</NAME>
<RETURNS>hb_face_t *</RETURNS>
HFONT hfont
</FUNCTION>
<FUNCTION>
<NAME>hb_glib_script_to_script</NAME>
<RETURNS>hb_script_t</RETURNS>
GUnicodeScript script
</FUNCTION>
<FUNCTION>
<NAME>hb_glib_script_from_script</NAME>
<RETURNS>GUnicodeScript</RETURNS>
hb_script_t script
</FUNCTION>
<FUNCTION>
<NAME>hb_glib_get_unicode_funcs</NAME>
<RETURNS>hb_unicode_funcs_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_glib_blob_create</NAME>
<RETURNS>hb_blob_t *</RETURNS>
GBytes *gbytes
</FUNCTION>
<MACRO>
<NAME>HB_GRAPHITE2_TAG_SILF</NAME>
#define HB_GRAPHITE2_TAG_SILF HB_TAG('S','i','l','f')
</MACRO>
<FUNCTION>
<NAME>hb_graphite2_face_get_gr_face</NAME>
<RETURNS>gr_face *</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_graphite2_font_get_gr_font</NAME>
<DEPRECATED/>
<RETURNS>gr_font *</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_icu_script_to_script</NAME>
<RETURNS>hb_script_t</RETURNS>
UScriptCode script
</FUNCTION>
<FUNCTION>
<NAME>hb_icu_script_from_script</NAME>
<RETURNS>UScriptCode</RETURNS>
hb_script_t script
</FUNCTION>
<FUNCTION>
<NAME>hb_icu_get_unicode_funcs</NAME>
<RETURNS>hb_unicode_funcs_t *</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>HB_MAP_VALUE_INVALID</NAME>
#define HB_MAP_VALUE_INVALID HB_CODEPOINT_INVALID
</MACRO>
<TYPEDEF>
<NAME>hb_map_t</NAME>
typedef struct hb_map_t hb_map_t;
</TYPEDEF>
<FUNCTION>
<NAME>hb_map_create</NAME>
<RETURNS>hb_map_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_map_get_empty</NAME>
<RETURNS>hb_map_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_map_reference</NAME>
<RETURNS>hb_map_t *</RETURNS>
hb_map_t *map
</FUNCTION>
<FUNCTION>
<NAME>hb_map_destroy</NAME>
<RETURNS>void</RETURNS>
hb_map_t *map
</FUNCTION>
<FUNCTION>
<NAME>hb_map_set_user_data</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_map_t           *map, hb_user_data_key_t *key, void *              data, hb_destroy_func_t   destroy, hb_bool_t           replace
</FUNCTION>
<FUNCTION>
<NAME>hb_map_get_user_data</NAME>
<RETURNS>void *</RETURNS>
const hb_map_t     *map, hb_user_data_key_t *key
</FUNCTION>
<FUNCTION>
<NAME>hb_map_allocation_successful</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_map_t *map
</FUNCTION>
<FUNCTION>
<NAME>hb_map_copy</NAME>
<RETURNS>hb_map_t *</RETURNS>
const hb_map_t *map
</FUNCTION>
<FUNCTION>
<NAME>hb_map_clear</NAME>
<RETURNS>void</RETURNS>
hb_map_t *map
</FUNCTION>
<FUNCTION>
<NAME>hb_map_is_empty</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_map_t *map
</FUNCTION>
<FUNCTION>
<NAME>hb_map_get_population</NAME>
<RETURNS>unsigned int</RETURNS>
const hb_map_t *map
</FUNCTION>
<FUNCTION>
<NAME>hb_map_is_equal</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_map_t *map, const hb_map_t *other
</FUNCTION>
<FUNCTION>
<NAME>hb_map_hash</NAME>
<RETURNS>unsigned int</RETURNS>
const hb_map_t *map
</FUNCTION>
<FUNCTION>
<NAME>hb_map_set</NAME>
<RETURNS>void</RETURNS>
hb_map_t       *map, hb_codepoint_t  key, hb_codepoint_t  value
</FUNCTION>
<FUNCTION>
<NAME>hb_map_get</NAME>
<RETURNS>hb_codepoint_t</RETURNS>
const hb_map_t *map, hb_codepoint_t  key
</FUNCTION>
<FUNCTION>
<NAME>hb_map_del</NAME>
<RETURNS>void</RETURNS>
hb_map_t       *map, hb_codepoint_t  key
</FUNCTION>
<FUNCTION>
<NAME>hb_map_has</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_map_t *map, hb_codepoint_t  key
</FUNCTION>
<FUNCTION>
<NAME>hb_map_update</NAME>
<RETURNS>void</RETURNS>
hb_map_t *map, const hb_map_t *other
</FUNCTION>
<FUNCTION>
<NAME>hb_map_next</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_map_t *map, int *idx, hb_codepoint_t *key, hb_codepoint_t *value
</FUNCTION>
<FUNCTION>
<NAME>hb_map_keys</NAME>
<RETURNS>void</RETURNS>
const hb_map_t *map, hb_set_t *keys
</FUNCTION>
<FUNCTION>
<NAME>hb_map_values</NAME>
<RETURNS>void</RETURNS>
const hb_map_t *map, hb_set_t *values
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_color_has_palettes</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_color_palette_get_count</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_color_palette_get_name_id</NAME>
<RETURNS>hb_ot_name_id_t</RETURNS>
hb_face_t *face, unsigned int palette_index
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_color_palette_color_get_name_id</NAME>
<RETURNS>hb_ot_name_id_t</RETURNS>
hb_face_t *face, unsigned int color_index
</FUNCTION>
<ENUM>
<NAME>hb_ot_color_palette_flags_t</NAME>
typedef enum { /*< flags >*/
  HB_OT_COLOR_PALETTE_FLAG_DEFAULT			= 0x00000000u,
  HB_OT_COLOR_PALETTE_FLAG_USABLE_WITH_LIGHT_BACKGROUND	= 0x00000001u,
  HB_OT_COLOR_PALETTE_FLAG_USABLE_WITH_DARK_BACKGROUND	= 0x00000002u
} hb_ot_color_palette_flags_t;
</ENUM>
<FUNCTION>
<NAME>hb_ot_color_palette_get_flags</NAME>
<RETURNS>hb_ot_color_palette_flags_t</RETURNS>
hb_face_t *face, unsigned int palette_index
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_color_palette_get_colors</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t    *face, unsigned int  palette_index, unsigned int  start_offset, unsigned int *color_count, hb_color_t   *colors
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_color_has_layers</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t *face
</FUNCTION>
<STRUCT>
<NAME>hb_ot_color_layer_t</NAME>
typedef struct hb_ot_color_layer_t {
  hb_codepoint_t glyph;
  unsigned int   color_index;
} hb_ot_color_layer_t;
</STRUCT>
<FUNCTION>
<NAME>hb_ot_color_glyph_get_layers</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t           *face, hb_codepoint_t       glyph, unsigned int         start_offset, unsigned int        *layer_count, hb_ot_color_layer_t *layers
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_color_has_paint</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_color_glyph_has_paint</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t      *face, hb_codepoint_t  glyph
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_color_has_svg</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_color_glyph_reference_svg</NAME>
<RETURNS>hb_blob_t *</RETURNS>
hb_face_t *face, hb_codepoint_t glyph
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_color_has_png</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_color_glyph_reference_png</NAME>
<RETURNS>hb_blob_t *</RETURNS>
hb_font_t *font, hb_codepoint_t glyph
</FUNCTION>
<MACRO>
<NAME>HB_MATH_GLYPH_PART_FLAG_EXTENDER</NAME>
<DEPRECATED/>
#define HB_MATH_GLYPH_PART_FLAG_EXTENDER HB_OT_MATH_GLYPH_PART_FLAG_EXTENDER
</MACRO>
<MACRO>
<NAME>HB_OT_MATH_SCRIPT</NAME>
<DEPRECATED/>
#define HB_OT_MATH_SCRIPT HB_OT_TAG_MATH_SCRIPT
</MACRO>
<FUNCTION>
<NAME>hb_ot_layout_table_choose_script</NAME>
<DEPRECATED/>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t      *face, hb_tag_t        table_tag, const hb_tag_t *script_tags, unsigned int   *script_index, hb_tag_t       *chosen_script
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_script_find_language</NAME>
<DEPRECATED/>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t    *face, hb_tag_t      table_tag, unsigned int  script_index, hb_tag_t      language_tag, unsigned int *language_index
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_tags_from_script</NAME>
<DEPRECATED/>
<RETURNS>void</RETURNS>
hb_script_t  script, hb_tag_t    *script_tag_1, hb_tag_t    *script_tag_2
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_tag_from_language</NAME>
<DEPRECATED/>
<RETURNS>hb_tag_t</RETURNS>
hb_language_t language
</FUNCTION>
<MACRO>
<NAME>HB_OT_VAR_NO_AXIS_INDEX</NAME>
<DEPRECATED/>
#define HB_OT_VAR_NO_AXIS_INDEX		0xFFFFFFFFu
</MACRO>
<STRUCT>
<NAME>hb_ot_var_axis_t</NAME>
<DEPRECATED/>
typedef struct hb_ot_var_axis_t {
  hb_tag_t tag;
  hb_ot_name_id_t name_id;
  float min_value;
  float default_value;
  float max_value;
} hb_ot_var_axis_t;
</STRUCT>
<FUNCTION>
<NAME>hb_ot_var_get_axes</NAME>
<DEPRECATED/>
<RETURNS>unsigned int</RETURNS>
hb_face_t        *face, unsigned int      start_offset, unsigned int     *axes_count , hb_ot_var_axis_t *axes_array
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_var_find_axis</NAME>
<DEPRECATED/>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t        *face, hb_tag_t          axis_tag, unsigned int     *axis_index, hb_ot_var_axis_t *axis_info
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_font_set_funcs</NAME>
<RETURNS>void</RETURNS>
hb_font_t *font
</FUNCTION>
<MACRO>
<NAME>HB_OT_TAG_BASE</NAME>
#define HB_OT_TAG_BASE HB_TAG('B','A','S','E')
</MACRO>
<MACRO>
<NAME>HB_OT_TAG_GDEF</NAME>
#define HB_OT_TAG_GDEF HB_TAG('G','D','E','F')
</MACRO>
<MACRO>
<NAME>HB_OT_TAG_GSUB</NAME>
#define HB_OT_TAG_GSUB HB_TAG('G','S','U','B')
</MACRO>
<MACRO>
<NAME>HB_OT_TAG_GPOS</NAME>
#define HB_OT_TAG_GPOS HB_TAG('G','P','O','S')
</MACRO>
<MACRO>
<NAME>HB_OT_TAG_JSTF</NAME>
#define HB_OT_TAG_JSTF HB_TAG('J','S','T','F')
</MACRO>
<MACRO>
<NAME>HB_OT_TAG_DEFAULT_SCRIPT</NAME>
#define HB_OT_TAG_DEFAULT_SCRIPT	HB_TAG ('D', 'F', 'L', 'T')
</MACRO>
<MACRO>
<NAME>HB_OT_TAG_DEFAULT_LANGUAGE</NAME>
#define HB_OT_TAG_DEFAULT_LANGUAGE	HB_TAG ('d', 'f', 'l', 't')
</MACRO>
<MACRO>
<NAME>HB_OT_MAX_TAGS_PER_SCRIPT</NAME>
#define HB_OT_MAX_TAGS_PER_SCRIPT	3u
</MACRO>
<MACRO>
<NAME>HB_OT_MAX_TAGS_PER_LANGUAGE</NAME>
#define HB_OT_MAX_TAGS_PER_LANGUAGE	3u
</MACRO>
<FUNCTION>
<NAME>hb_ot_tags_from_script_and_language</NAME>
<RETURNS>void</RETURNS>
hb_script_t   script, hb_language_t language, unsigned int *script_count , hb_tag_t     *script_tags , unsigned int *language_count , hb_tag_t     *language_tags
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_tag_to_script</NAME>
<RETURNS>hb_script_t</RETURNS>
hb_tag_t tag
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_tag_to_language</NAME>
<RETURNS>hb_language_t</RETURNS>
hb_tag_t tag
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_tags_to_script_and_language</NAME>
<RETURNS>void</RETURNS>
hb_tag_t       script_tag, hb_tag_t       language_tag, hb_script_t   *script , hb_language_t *language
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_has_glyph_classes</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t *face
</FUNCTION>
<ENUM>
<NAME>hb_ot_layout_glyph_class_t</NAME>
typedef enum {
  HB_OT_LAYOUT_GLYPH_CLASS_UNCLASSIFIED	= 0,
  HB_OT_LAYOUT_GLYPH_CLASS_BASE_GLYPH	= 1,
  HB_OT_LAYOUT_GLYPH_CLASS_LIGATURE	= 2,
  HB_OT_LAYOUT_GLYPH_CLASS_MARK		= 3,
  HB_OT_LAYOUT_GLYPH_CLASS_COMPONENT	= 4
} hb_ot_layout_glyph_class_t;
</ENUM>
<FUNCTION>
<NAME>hb_ot_layout_get_glyph_class</NAME>
<RETURNS>hb_ot_layout_glyph_class_t</RETURNS>
hb_face_t      *face, hb_codepoint_t  glyph
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_get_glyphs_in_class</NAME>
<RETURNS>void</RETURNS>
hb_face_t                  *face, hb_ot_layout_glyph_class_t  klass, hb_set_t                   *glyphs
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_get_attach_points</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t      *face, hb_codepoint_t  glyph, unsigned int    start_offset, unsigned int   *point_count , unsigned int   *point_array
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_get_ligature_carets</NAME>
<RETURNS>unsigned int</RETURNS>
hb_font_t      *font, hb_direction_t  direction, hb_codepoint_t  glyph, unsigned int    start_offset, unsigned int   *caret_count , hb_position_t  *caret_array
</FUNCTION>
<MACRO>
<NAME>HB_OT_LAYOUT_NO_SCRIPT_INDEX</NAME>
#define HB_OT_LAYOUT_NO_SCRIPT_INDEX		0xFFFFu
</MACRO>
<MACRO>
<NAME>HB_OT_LAYOUT_NO_FEATURE_INDEX</NAME>
#define HB_OT_LAYOUT_NO_FEATURE_INDEX		0xFFFFu
</MACRO>
<MACRO>
<NAME>HB_OT_LAYOUT_DEFAULT_LANGUAGE_INDEX</NAME>
#define HB_OT_LAYOUT_DEFAULT_LANGUAGE_INDEX	0xFFFFu
</MACRO>
<MACRO>
<NAME>HB_OT_LAYOUT_NO_VARIATIONS_INDEX</NAME>
#define HB_OT_LAYOUT_NO_VARIATIONS_INDEX	0xFFFFFFFFu
</MACRO>
<FUNCTION>
<NAME>hb_ot_layout_table_get_script_tags</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t    *face, hb_tag_t      table_tag, unsigned int  start_offset, unsigned int *script_count , hb_tag_t     *script_tags
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_table_find_script</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t    *face, hb_tag_t      table_tag, hb_tag_t      script_tag, unsigned int *script_index
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_table_select_script</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t      *face, hb_tag_t        table_tag, unsigned int    script_count, const hb_tag_t *script_tags, unsigned int   *script_index , hb_tag_t       *chosen_script
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_table_get_feature_tags</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t    *face, hb_tag_t      table_tag, unsigned int  start_offset, unsigned int *feature_count , hb_tag_t     *feature_tags
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_script_get_language_tags</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t    *face, hb_tag_t      table_tag, unsigned int  script_index, unsigned int  start_offset, unsigned int *language_count , hb_tag_t     *language_tags
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_script_select_language</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t      *face, hb_tag_t        table_tag, unsigned int    script_index, unsigned int    language_count, const hb_tag_t *language_tags, unsigned int   *language_index
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_script_select_language2</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t      *face, hb_tag_t        table_tag, unsigned int    script_index, unsigned int    language_count, const hb_tag_t *language_tags, unsigned int   *language_index , hb_tag_t       *chosen_language
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_language_get_required_feature_index</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t    *face, hb_tag_t      table_tag, unsigned int  script_index, unsigned int  language_index, unsigned int *feature_index
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_language_get_required_feature</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t    *face, hb_tag_t      table_tag, unsigned int  script_index, unsigned int  language_index, unsigned int *feature_index , hb_tag_t     *feature_tag
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_language_get_feature_indexes</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t    *face, hb_tag_t      table_tag, unsigned int  script_index, unsigned int  language_index, unsigned int  start_offset, unsigned int *feature_count , unsigned int *feature_indexes
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_language_get_feature_tags</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t    *face, hb_tag_t      table_tag, unsigned int  script_index, unsigned int  language_index, unsigned int  start_offset, unsigned int *feature_count , hb_tag_t     *feature_tags
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_language_find_feature</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t    *face, hb_tag_t      table_tag, unsigned int  script_index, unsigned int  language_index, hb_tag_t      feature_tag, unsigned int *feature_index
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_feature_get_lookups</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t    *face, hb_tag_t      table_tag, unsigned int  feature_index, unsigned int  start_offset, unsigned int *lookup_count , unsigned int *lookup_indexes
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_table_get_lookup_count</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t    *face, hb_tag_t      table_tag
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_collect_features</NAME>
<RETURNS>void</RETURNS>
hb_face_t      *face, hb_tag_t        table_tag, const hb_tag_t *scripts, const hb_tag_t *languages, const hb_tag_t *features, hb_set_t       *feature_indexes
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_collect_features_map</NAME>
<RETURNS>void</RETURNS>
hb_face_t      *face, hb_tag_t        table_tag, unsigned        script_index, unsigned        language_index, hb_map_t       *feature_map
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_collect_lookups</NAME>
<RETURNS>void</RETURNS>
hb_face_t      *face, hb_tag_t        table_tag, const hb_tag_t *scripts, const hb_tag_t *languages, const hb_tag_t *features, hb_set_t       *lookup_indexes
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_lookup_collect_glyphs</NAME>
<RETURNS>void</RETURNS>
hb_face_t    *face, hb_tag_t      table_tag, unsigned int  lookup_index, hb_set_t     *glyphs_before, hb_set_t     *glyphs_input, hb_set_t     *glyphs_after, hb_set_t     *glyphs_output
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_table_find_feature_variations</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t    *face, hb_tag_t      table_tag, const int    *coords, unsigned int  num_coords, unsigned int *variations_index
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_feature_with_variations_get_lookups</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t    *face, hb_tag_t      table_tag, unsigned int  feature_index, unsigned int  variations_index, unsigned int  start_offset, unsigned int *lookup_count , unsigned int *lookup_indexes
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_has_substitution</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_lookup_get_glyph_alternates</NAME>
<RETURNS>unsigned</RETURNS>
hb_face_t      *face, unsigned        lookup_index, hb_codepoint_t  glyph, unsigned        start_offset, unsigned       *alternate_count , hb_codepoint_t *alternate_glyphs
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_lookup_would_substitute</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t            *face, unsigned int          lookup_index, const hb_codepoint_t *glyphs, unsigned int          glyphs_length, hb_bool_t             zero_context
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_lookup_substitute_closure</NAME>
<RETURNS>void</RETURNS>
hb_face_t    *face, unsigned int  lookup_index, hb_set_t     *glyphs
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_lookups_substitute_closure</NAME>
<RETURNS>void</RETURNS>
hb_face_t      *face, const hb_set_t *lookups, hb_set_t       *glyphs
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_has_positioning</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_get_size_params</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t       *face, unsigned int    *design_size, unsigned int    *subfamily_id, hb_ot_name_id_t *subfamily_name_id, unsigned int    *range_start, unsigned int    *range_end
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_lookup_get_optical_bound</NAME>
<RETURNS>hb_position_t</RETURNS>
hb_font_t      *font, unsigned        lookup_index, hb_direction_t  direction, hb_codepoint_t  glyph
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_feature_get_name_ids</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t       *face, hb_tag_t         table_tag, unsigned int     feature_index, hb_ot_name_id_t *label_id             , hb_ot_name_id_t *tooltip_id           , hb_ot_name_id_t *sample_id            , unsigned int    *num_named_parameters , hb_ot_name_id_t *first_param_id
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_feature_get_characters</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t      *face, hb_tag_t        table_tag, unsigned int    feature_index, unsigned int    start_offset, unsigned int   *char_count    , hb_codepoint_t *characters
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_get_font_extents</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t         *font, hb_direction_t     direction, hb_tag_t           script_tag, hb_tag_t           language_tag, hb_font_extents_t *extents
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_get_font_extents2</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t         *font, hb_direction_t     direction, hb_script_t        script, hb_language_t      language, hb_font_extents_t *extents
</FUNCTION>
<ENUM>
<NAME>hb_ot_layout_baseline_tag_t</NAME>
typedef enum {
  HB_OT_LAYOUT_BASELINE_TAG_ROMAN			= HB_TAG ('r','o','m','n'),
  HB_OT_LAYOUT_BASELINE_TAG_HANGING			= HB_TAG ('h','a','n','g'),
  HB_OT_LAYOUT_BASELINE_TAG_IDEO_FACE_BOTTOM_OR_LEFT	= HB_TAG ('i','c','f','b'),
  HB_OT_LAYOUT_BASELINE_TAG_IDEO_FACE_TOP_OR_RIGHT	= HB_TAG ('i','c','f','t'),
  HB_OT_LAYOUT_BASELINE_TAG_IDEO_FACE_CENTRAL		= HB_TAG ('I','c','f','c'),
  HB_OT_LAYOUT_BASELINE_TAG_IDEO_EMBOX_BOTTOM_OR_LEFT	= HB_TAG ('i','d','e','o'),
  HB_OT_LAYOUT_BASELINE_TAG_IDEO_EMBOX_TOP_OR_RIGHT	= HB_TAG ('i','d','t','p'),
  HB_OT_LAYOUT_BASELINE_TAG_IDEO_EMBOX_CENTRAL		= HB_TAG ('I','d','c','e'),
  HB_OT_LAYOUT_BASELINE_TAG_MATH			= HB_TAG ('m','a','t','h'),

  /*< private >*/
  _HB_OT_LAYOUT_BASELINE_TAG_MAX_VALUE = HB_TAG_MAX_SIGNED /*< skip >*/
} hb_ot_layout_baseline_tag_t;
</ENUM>
<FUNCTION>
<NAME>hb_ot_layout_get_horizontal_baseline_tag_for_script</NAME>
<RETURNS>hb_ot_layout_baseline_tag_t</RETURNS>
hb_script_t script
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_get_baseline</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t                   *font, hb_ot_layout_baseline_tag_t  baseline_tag, hb_direction_t               direction, hb_tag_t                     script_tag, hb_tag_t                     language_tag, hb_position_t               *coord
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_get_baseline2</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t                   *font, hb_ot_layout_baseline_tag_t  baseline_tag, hb_direction_t               direction, hb_script_t                  script, hb_language_t                language, hb_position_t               *coord
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_get_baseline_with_fallback</NAME>
<RETURNS>void</RETURNS>
hb_font_t                   *font, hb_ot_layout_baseline_tag_t  baseline_tag, hb_direction_t               direction, hb_tag_t                     script_tag, hb_tag_t                     language_tag, hb_position_t               *coord
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_layout_get_baseline_with_fallback2</NAME>
<RETURNS>void</RETURNS>
hb_font_t                   *font, hb_ot_layout_baseline_tag_t  baseline_tag, hb_direction_t               direction, hb_script_t                  script, hb_language_t                language, hb_position_t               *coord
</FUNCTION>
<MACRO>
<NAME>HB_OT_TAG_MATH</NAME>
#define HB_OT_TAG_MATH HB_TAG('M','A','T','H')
</MACRO>
<MACRO>
<NAME>HB_OT_TAG_MATH_SCRIPT</NAME>
#define HB_OT_TAG_MATH_SCRIPT HB_TAG('m','a','t','h')
</MACRO>
<ENUM>
<NAME>hb_ot_math_constant_t</NAME>
typedef enum {
  HB_OT_MATH_CONSTANT_SCRIPT_PERCENT_SCALE_DOWN = 0,
  HB_OT_MATH_CONSTANT_SCRIPT_SCRIPT_PERCENT_SCALE_DOWN = 1,
  HB_OT_MATH_CONSTANT_DELIMITED_SUB_FORMULA_MIN_HEIGHT = 2,
  HB_OT_MATH_CONSTANT_DISPLAY_OPERATOR_MIN_HEIGHT = 3,
  HB_OT_MATH_CONSTANT_MATH_LEADING = 4,
  HB_OT_MATH_CONSTANT_AXIS_HEIGHT = 5,
  HB_OT_MATH_CONSTANT_ACCENT_BASE_HEIGHT = 6,
  HB_OT_MATH_CONSTANT_FLATTENED_ACCENT_BASE_HEIGHT = 7,
  HB_OT_MATH_CONSTANT_SUBSCRIPT_SHIFT_DOWN = 8,
  HB_OT_MATH_CONSTANT_SUBSCRIPT_TOP_MAX = 9,
  HB_OT_MATH_CONSTANT_SUBSCRIPT_BASELINE_DROP_MIN = 10,
  HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP = 11,
  HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP_CRAMPED = 12,
  HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MIN = 13,
  HB_OT_MATH_CONSTANT_SUPERSCRIPT_BASELINE_DROP_MAX = 14,
  HB_OT_MATH_CONSTANT_SUB_SUPERSCRIPT_GAP_MIN = 15,
  HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MAX_WITH_SUBSCRIPT = 16,
  HB_OT_MATH_CONSTANT_SPACE_AFTER_SCRIPT = 17,
  HB_OT_MATH_CONSTANT_UPPER_LIMIT_GAP_MIN = 18,
  HB_OT_MATH_CONSTANT_UPPER_LIMIT_BASELINE_RISE_MIN = 19,
  HB_OT_MATH_CONSTANT_LOWER_LIMIT_GAP_MIN = 20,
  HB_OT_MATH_CONSTANT_LOWER_LIMIT_BASELINE_DROP_MIN = 21,
  HB_OT_MATH_CONSTANT_STACK_TOP_SHIFT_UP = 22,
  HB_OT_MATH_CONSTANT_STACK_TOP_DISPLAY_STYLE_SHIFT_UP = 23,
  HB_OT_MATH_CONSTANT_STACK_BOTTOM_SHIFT_DOWN = 24,
  HB_OT_MATH_CONSTANT_STACK_BOTTOM_DISPLAY_STYLE_SHIFT_DOWN = 25,
  HB_OT_MATH_CONSTANT_STACK_GAP_MIN = 26,
  HB_OT_MATH_CONSTANT_STACK_DISPLAY_STYLE_GAP_MIN = 27,
  HB_OT_MATH_CONSTANT_STRETCH_STACK_TOP_SHIFT_UP = 28,
  HB_OT_MATH_CONSTANT_STRETCH_STACK_BOTTOM_SHIFT_DOWN = 29,
  HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_ABOVE_MIN = 30,
  HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_BELOW_MIN = 31,
  HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_SHIFT_UP = 32,
  HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_DISPLAY_STYLE_SHIFT_UP = 33,
  HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_SHIFT_DOWN = 34,
  HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_DISPLAY_STYLE_SHIFT_DOWN = 35,
  HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_GAP_MIN = 36,
  HB_OT_MATH_CONSTANT_FRACTION_NUM_DISPLAY_STYLE_GAP_MIN = 37,
  HB_OT_MATH_CONSTANT_FRACTION_RULE_THICKNESS = 38,
  HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_GAP_MIN = 39,
  HB_OT_MATH_CONSTANT_FRACTION_DENOM_DISPLAY_STYLE_GAP_MIN = 40,
  HB_OT_MATH_CONSTANT_SKEWED_FRACTION_HORIZONTAL_GAP = 41,
  HB_OT_MATH_CONSTANT_SKEWED_FRACTION_VERTICAL_GAP = 42,
  HB_OT_MATH_CONSTANT_OVERBAR_VERTICAL_GAP = 43,
  HB_OT_MATH_CONSTANT_OVERBAR_RULE_THICKNESS = 44,
  HB_OT_MATH_CONSTANT_OVERBAR_EXTRA_ASCENDER = 45,
  HB_OT_MATH_CONSTANT_UNDERBAR_VERTICAL_GAP = 46,
  HB_OT_MATH_CONSTANT_UNDERBAR_RULE_THICKNESS = 47,
  HB_OT_MATH_CONSTANT_UNDERBAR_EXTRA_DESCENDER = 48,
  HB_OT_MATH_CONSTANT_RADICAL_VERTICAL_GAP = 49,
  HB_OT_MATH_CONSTANT_RADICAL_DISPLAY_STYLE_VERTICAL_GAP = 50,
  HB_OT_MATH_CONSTANT_RADICAL_RULE_THICKNESS = 51,
  HB_OT_MATH_CONSTANT_RADICAL_EXTRA_ASCENDER = 52,
  HB_OT_MATH_CONSTANT_RADICAL_KERN_BEFORE_DEGREE = 53,
  HB_OT_MATH_CONSTANT_RADICAL_KERN_AFTER_DEGREE = 54,
  HB_OT_MATH_CONSTANT_RADICAL_DEGREE_BOTTOM_RAISE_PERCENT = 55
} hb_ot_math_constant_t;
</ENUM>
<ENUM>
<NAME>hb_ot_math_kern_t</NAME>
typedef enum {
  HB_OT_MATH_KERN_TOP_RIGHT = 0,
  HB_OT_MATH_KERN_TOP_LEFT = 1,
  HB_OT_MATH_KERN_BOTTOM_RIGHT = 2,
  HB_OT_MATH_KERN_BOTTOM_LEFT = 3
} hb_ot_math_kern_t;
</ENUM>
<STRUCT>
<NAME>hb_ot_math_kern_entry_t</NAME>
typedef struct {
  hb_position_t max_correction_height;
  hb_position_t kern_value;
} hb_ot_math_kern_entry_t;
</STRUCT>
<STRUCT>
<NAME>hb_ot_math_glyph_variant_t</NAME>
typedef struct hb_ot_math_glyph_variant_t {
  hb_codepoint_t glyph;
  hb_position_t advance;
} hb_ot_math_glyph_variant_t;
</STRUCT>
<ENUM>
<NAME>hb_ot_math_glyph_part_flags_t</NAME>
typedef enum { /*< flags >*/
  HB_OT_MATH_GLYPH_PART_FLAG_EXTENDER	= 0x00000001u  /* Extender glyph */
} hb_ot_math_glyph_part_flags_t;
</ENUM>
<STRUCT>
<NAME>hb_ot_math_glyph_part_t</NAME>
typedef struct hb_ot_math_glyph_part_t {
  hb_codepoint_t glyph;
  hb_position_t start_connector_length;
  hb_position_t end_connector_length;
  hb_position_t full_advance;
  hb_ot_math_glyph_part_flags_t flags;
} hb_ot_math_glyph_part_t;
</STRUCT>
<FUNCTION>
<NAME>hb_ot_math_has_data</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_math_get_constant</NAME>
<RETURNS>hb_position_t</RETURNS>
hb_font_t *font, hb_ot_math_constant_t constant
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_math_get_glyph_italics_correction</NAME>
<RETURNS>hb_position_t</RETURNS>
hb_font_t *font, hb_codepoint_t glyph
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_math_get_glyph_top_accent_attachment</NAME>
<RETURNS>hb_position_t</RETURNS>
hb_font_t *font, hb_codepoint_t glyph
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_math_is_glyph_extended_shape</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t *face, hb_codepoint_t glyph
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_math_get_glyph_kerning</NAME>
<RETURNS>hb_position_t</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, hb_ot_math_kern_t kern, hb_position_t correction_height
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_math_get_glyph_kernings</NAME>
<RETURNS>unsigned int</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, hb_ot_math_kern_t kern, unsigned int start_offset, unsigned int *entries_count, hb_ot_math_kern_entry_t *kern_entries
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_math_get_glyph_variants</NAME>
<RETURNS>unsigned int</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, unsigned int start_offset, unsigned int *variants_count, hb_ot_math_glyph_variant_t *variants
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_math_get_min_connector_overlap</NAME>
<RETURNS>hb_position_t</RETURNS>
hb_font_t *font, hb_direction_t direction
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_math_get_glyph_assembly</NAME>
<RETURNS>unsigned int</RETURNS>
hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, unsigned int start_offset, unsigned int *parts_count, hb_ot_math_glyph_part_t *parts, hb_position_t *italics_correction
</FUNCTION>
<ENUM>
<NAME>hb_ot_meta_tag_t</NAME>
typedef enum {
/*
   HB_OT_META_TAG_APPL		= HB_TAG ('a','p','p','l'),
   HB_OT_META_TAG_BILD		= HB_TAG ('b','i','l','d'),
*/
  HB_OT_META_TAG_DESIGN_LANGUAGES	= HB_TAG ('d','l','n','g'),
  HB_OT_META_TAG_SUPPORTED_LANGUAGES	= HB_TAG ('s','l','n','g'),

  /*< private >*/
  _HB_OT_META_TAG_MAX_VALUE = HB_TAG_MAX_SIGNED /*< skip >*/
} hb_ot_meta_tag_t;
</ENUM>
<FUNCTION>
<NAME>hb_ot_meta_get_entry_tags</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t        *face, unsigned int      start_offset, unsigned int     *entries_count, hb_ot_meta_tag_t *entries
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_meta_reference_entry</NAME>
<RETURNS>hb_blob_t *</RETURNS>
hb_face_t *face, hb_ot_meta_tag_t meta_tag
</FUNCTION>
<ENUM>
<NAME>hb_ot_metrics_tag_t</NAME>
typedef enum {
  HB_OT_METRICS_TAG_HORIZONTAL_ASCENDER		= HB_TAG ('h','a','s','c'),
  HB_OT_METRICS_TAG_HORIZONTAL_DESCENDER	= HB_TAG ('h','d','s','c'),
  HB_OT_METRICS_TAG_HORIZONTAL_LINE_GAP		= HB_TAG ('h','l','g','p'),
  HB_OT_METRICS_TAG_HORIZONTAL_CLIPPING_ASCENT	= HB_TAG ('h','c','l','a'),
  HB_OT_METRICS_TAG_HORIZONTAL_CLIPPING_DESCENT	= HB_TAG ('h','c','l','d'),
  HB_OT_METRICS_TAG_VERTICAL_ASCENDER		= HB_TAG ('v','a','s','c'),
  HB_OT_METRICS_TAG_VERTICAL_DESCENDER		= HB_TAG ('v','d','s','c'),
  HB_OT_METRICS_TAG_VERTICAL_LINE_GAP		= HB_TAG ('v','l','g','p'),
  HB_OT_METRICS_TAG_HORIZONTAL_CARET_RISE	= HB_TAG ('h','c','r','s'),
  HB_OT_METRICS_TAG_HORIZONTAL_CARET_RUN	= HB_TAG ('h','c','r','n'),
  HB_OT_METRICS_TAG_HORIZONTAL_CARET_OFFSET	= HB_TAG ('h','c','o','f'),
  HB_OT_METRICS_TAG_VERTICAL_CARET_RISE		= HB_TAG ('v','c','r','s'),
  HB_OT_METRICS_TAG_VERTICAL_CARET_RUN		= HB_TAG ('v','c','r','n'),
  HB_OT_METRICS_TAG_VERTICAL_CARET_OFFSET	= HB_TAG ('v','c','o','f'),
  HB_OT_METRICS_TAG_X_HEIGHT			= HB_TAG ('x','h','g','t'),
  HB_OT_METRICS_TAG_CAP_HEIGHT			= HB_TAG ('c','p','h','t'),
  HB_OT_METRICS_TAG_SUBSCRIPT_EM_X_SIZE		= HB_TAG ('s','b','x','s'),
  HB_OT_METRICS_TAG_SUBSCRIPT_EM_Y_SIZE		= HB_TAG ('s','b','y','s'),
  HB_OT_METRICS_TAG_SUBSCRIPT_EM_X_OFFSET	= HB_TAG ('s','b','x','o'),
  HB_OT_METRICS_TAG_SUBSCRIPT_EM_Y_OFFSET	= HB_TAG ('s','b','y','o'),
  HB_OT_METRICS_TAG_SUPERSCRIPT_EM_X_SIZE	= HB_TAG ('s','p','x','s'),
  HB_OT_METRICS_TAG_SUPERSCRIPT_EM_Y_SIZE	= HB_TAG ('s','p','y','s'),
  HB_OT_METRICS_TAG_SUPERSCRIPT_EM_X_OFFSET	= HB_TAG ('s','p','x','o'),
  HB_OT_METRICS_TAG_SUPERSCRIPT_EM_Y_OFFSET	= HB_TAG ('s','p','y','o'),
  HB_OT_METRICS_TAG_STRIKEOUT_SIZE		= HB_TAG ('s','t','r','s'),
  HB_OT_METRICS_TAG_STRIKEOUT_OFFSET		= HB_TAG ('s','t','r','o'),
  HB_OT_METRICS_TAG_UNDERLINE_SIZE		= HB_TAG ('u','n','d','s'),
  HB_OT_METRICS_TAG_UNDERLINE_OFFSET		= HB_TAG ('u','n','d','o'),

  /*< private >*/
  _HB_OT_METRICS_TAG_MAX_VALUE = HB_TAG_MAX_SIGNED /*< skip >*/
} hb_ot_metrics_tag_t;
</ENUM>
<FUNCTION>
<NAME>hb_ot_metrics_get_position</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t           *font, hb_ot_metrics_tag_t  metrics_tag, hb_position_t       *position
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_metrics_get_position_with_fallback</NAME>
<RETURNS>void</RETURNS>
hb_font_t           *font, hb_ot_metrics_tag_t  metrics_tag, hb_position_t       *position
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_metrics_get_variation</NAME>
<RETURNS>float</RETURNS>
hb_font_t *font, hb_ot_metrics_tag_t metrics_tag
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_metrics_get_x_variation</NAME>
<RETURNS>hb_position_t</RETURNS>
hb_font_t *font, hb_ot_metrics_tag_t metrics_tag
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_metrics_get_y_variation</NAME>
<RETURNS>hb_position_t</RETURNS>
hb_font_t *font, hb_ot_metrics_tag_t metrics_tag
</FUNCTION>
<ENUM>
<NAME>hb_ot_name_id_predefined_t</NAME>
typedef enum
{
  HB_OT_NAME_ID_COPYRIGHT		= 0,
  HB_OT_NAME_ID_FONT_FAMILY		= 1,
  HB_OT_NAME_ID_FONT_SUBFAMILY		= 2,
  HB_OT_NAME_ID_UNIQUE_ID		= 3,
  HB_OT_NAME_ID_FULL_NAME		= 4,
  HB_OT_NAME_ID_VERSION_STRING		= 5,
  HB_OT_NAME_ID_POSTSCRIPT_NAME		= 6,
  HB_OT_NAME_ID_TRADEMARK		= 7,
  HB_OT_NAME_ID_MANUFACTURER		= 8,
  HB_OT_NAME_ID_DESIGNER		= 9,
  HB_OT_NAME_ID_DESCRIPTION		= 10,
  HB_OT_NAME_ID_VENDOR_URL		= 11,
  HB_OT_NAME_ID_DESIGNER_URL		= 12,
  HB_OT_NAME_ID_LICENSE			= 13,
  HB_OT_NAME_ID_LICENSE_URL		= 14,
/*HB_OT_NAME_ID_RESERVED		= 15,*/
  HB_OT_NAME_ID_TYPOGRAPHIC_FAMILY	= 16,
  HB_OT_NAME_ID_TYPOGRAPHIC_SUBFAMILY	= 17,
  HB_OT_NAME_ID_MAC_FULL_NAME		= 18,
  HB_OT_NAME_ID_SAMPLE_TEXT		= 19,
  HB_OT_NAME_ID_CID_FINDFONT_NAME	= 20,
  HB_OT_NAME_ID_WWS_FAMILY		= 21,
  HB_OT_NAME_ID_WWS_SUBFAMILY		= 22,
  HB_OT_NAME_ID_LIGHT_BACKGROUND	= 23,
  HB_OT_NAME_ID_DARK_BACKGROUND		= 24,
  HB_OT_NAME_ID_VARIATIONS_PS_PREFIX	= 25,

  HB_OT_NAME_ID_INVALID			= 0xFFFF
} hb_ot_name_id_predefined_t;
</ENUM>
<TYPEDEF>
<NAME>hb_ot_name_id_t</NAME>
typedef unsigned int hb_ot_name_id_t;
</TYPEDEF>
<STRUCT>
<NAME>hb_ot_name_entry_t</NAME>
typedef struct hb_ot_name_entry_t {
  hb_ot_name_id_t name_id;
  /*< private >*/
  hb_var_int_t    var;
  /*< public >*/
  hb_language_t   language;
} hb_ot_name_entry_t;
</STRUCT>
<FUNCTION>
<NAME>hb_ot_name_list_names</NAME>
<RETURNS>const hb_ot_name_entry_t *</RETURNS>
hb_face_t    *face, unsigned int *num_entries
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_name_get_utf8</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t       *face, hb_ot_name_id_t  name_id, hb_language_t    language, unsigned int    *text_size , char            *text
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_name_get_utf16</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t       *face, hb_ot_name_id_t  name_id, hb_language_t    language, unsigned int    *text_size , uint16_t        *text
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_name_get_utf32</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t       *face, hb_ot_name_id_t  name_id, hb_language_t    language, unsigned int    *text_size , uint32_t        *text
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_shape_glyphs_closure</NAME>
<RETURNS>void</RETURNS>
hb_font_t          *font, hb_buffer_t        *buffer, const hb_feature_t *features, unsigned int        num_features, hb_set_t           *glyphs
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_shape_plan_collect_lookups</NAME>
<RETURNS>void</RETURNS>
hb_shape_plan_t *shape_plan, hb_tag_t         table_tag, hb_set_t        *lookup_indexes
</FUNCTION>
<MACRO>
<NAME>HB_OT_TAG_VAR_AXIS_ITALIC</NAME>
#define HB_OT_TAG_VAR_AXIS_ITALIC	HB_TAG('i','t','a','l')
</MACRO>
<MACRO>
<NAME>HB_OT_TAG_VAR_AXIS_OPTICAL_SIZE</NAME>
#define HB_OT_TAG_VAR_AXIS_OPTICAL_SIZE	HB_TAG('o','p','s','z')
</MACRO>
<MACRO>
<NAME>HB_OT_TAG_VAR_AXIS_SLANT</NAME>
#define HB_OT_TAG_VAR_AXIS_SLANT	HB_TAG('s','l','n','t')
</MACRO>
<MACRO>
<NAME>HB_OT_TAG_VAR_AXIS_WIDTH</NAME>
#define HB_OT_TAG_VAR_AXIS_WIDTH	HB_TAG('w','d','t','h')
</MACRO>
<MACRO>
<NAME>HB_OT_TAG_VAR_AXIS_WEIGHT</NAME>
#define HB_OT_TAG_VAR_AXIS_WEIGHT	HB_TAG('w','g','h','t')
</MACRO>
<FUNCTION>
<NAME>hb_ot_var_has_data</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_var_get_axis_count</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t *face
</FUNCTION>
<ENUM>
<NAME>hb_ot_var_axis_flags_t</NAME>
typedef enum { /*< flags >*/
  HB_OT_VAR_AXIS_FLAG_HIDDEN	= 0x00000001u,

  /*< private >*/
  _HB_OT_VAR_AXIS_FLAG_MAX_VALUE= HB_TAG_MAX_SIGNED /*< skip >*/
} hb_ot_var_axis_flags_t;
</ENUM>
<STRUCT>
<NAME>hb_ot_var_axis_info_t</NAME>
typedef struct hb_ot_var_axis_info_t {
  unsigned int			axis_index;
  hb_tag_t			tag;
  hb_ot_name_id_t		name_id;
  hb_ot_var_axis_flags_t	flags;
  float				min_value;
  float				default_value;
  float				max_value;
  /*< private >*/
  unsigned int			reserved;
} hb_ot_var_axis_info_t;
</STRUCT>
<FUNCTION>
<NAME>hb_ot_var_get_axis_infos</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t             *face, unsigned int           start_offset, unsigned int          *axes_count , hb_ot_var_axis_info_t *axes_array
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_var_find_axis_info</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_face_t             *face, hb_tag_t               axis_tag, hb_ot_var_axis_info_t *axis_info
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_var_get_named_instance_count</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t *face
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_var_named_instance_get_subfamily_name_id</NAME>
<RETURNS>hb_ot_name_id_t</RETURNS>
hb_face_t   *face, unsigned int instance_index
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_var_named_instance_get_postscript_name_id</NAME>
<RETURNS>hb_ot_name_id_t</RETURNS>
hb_face_t  *face, unsigned int instance_index
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_var_named_instance_get_design_coords</NAME>
<RETURNS>unsigned int</RETURNS>
hb_face_t    *face, unsigned int  instance_index, unsigned int *coords_length, float        *coords
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_var_normalize_variations</NAME>
<RETURNS>void</RETURNS>
hb_face_t            *face, const hb_variation_t *variations, unsigned int          variations_length, int                  *coords, unsigned int          coords_length
</FUNCTION>
<FUNCTION>
<NAME>hb_ot_var_normalize_coords</NAME>
<RETURNS>void</RETURNS>
hb_face_t    *face, unsigned int coords_length, const float *design_coords, int *normalized_coords
</FUNCTION>
<MACRO>
<NAME>HB_OT_H_IN</NAME>
#define HB_OT_H_IN
</MACRO>
<TYPEDEF>
<NAME>hb_paint_funcs_t</NAME>
typedef struct hb_paint_funcs_t hb_paint_funcs_t;
</TYPEDEF>
<FUNCTION>
<NAME>hb_paint_funcs_create</NAME>
<RETURNS>hb_paint_funcs_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_get_empty</NAME>
<RETURNS>hb_paint_funcs_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_reference</NAME>
<RETURNS>hb_paint_funcs_t *</RETURNS>
hb_paint_funcs_t *funcs
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_destroy</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_set_user_data</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_paint_funcs_t *funcs, hb_user_data_key_t *key, void *              data, hb_destroy_func_t   destroy, hb_bool_t           replace
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_get_user_data</NAME>
<RETURNS>void *</RETURNS>
const hb_paint_funcs_t *funcs, hb_user_data_key_t       *key
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_make_immutable</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_is_immutable</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_paint_funcs_t *funcs
</FUNCTION>
<USER_FUNCTION>
<NAME>hb_paint_push_transform_func_t</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, float xx, float yx, float xy, float yy, float dx, float dy, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_paint_pop_transform_func_t</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_paint_push_clip_glyph_func_t</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, hb_codepoint_t glyph, hb_font_t *font, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_paint_push_clip_rectangle_func_t</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, float xmin, float ymin, float xmax, float ymax, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_paint_pop_clip_func_t</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_paint_color_func_t</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, hb_bool_t is_foreground, hb_color_t color, void *user_data
</USER_FUNCTION>
<MACRO>
<NAME>HB_PAINT_IMAGE_FORMAT_PNG</NAME>
#define HB_PAINT_IMAGE_FORMAT_PNG HB_TAG('p','n','g',' ')
</MACRO>
<MACRO>
<NAME>HB_PAINT_IMAGE_FORMAT_SVG</NAME>
#define HB_PAINT_IMAGE_FORMAT_SVG HB_TAG('s','v','g',' ')
</MACRO>
<MACRO>
<NAME>HB_PAINT_IMAGE_FORMAT_BGRA</NAME>
#define HB_PAINT_IMAGE_FORMAT_BGRA HB_TAG('B','G','R','A')
</MACRO>
<USER_FUNCTION>
<NAME>hb_paint_image_func_t</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, hb_blob_t *image, unsigned int width, unsigned int height, hb_tag_t format, float slant, hb_glyph_extents_t *extents, void *user_data
</USER_FUNCTION>
<STRUCT>
<NAME>hb_color_stop_t</NAME>
typedef struct {
  float offset;
  hb_bool_t is_foreground;
  hb_color_t color;
} hb_color_stop_t;
</STRUCT>
<ENUM>
<NAME>hb_paint_extend_t</NAME>
typedef enum {
  HB_PAINT_EXTEND_PAD,
  HB_PAINT_EXTEND_REPEAT,
  HB_PAINT_EXTEND_REFLECT
} hb_paint_extend_t;
</ENUM>
<TYPEDEF>
<NAME>hb_color_line_t</NAME>
typedef struct hb_color_line_t hb_color_line_t;
</TYPEDEF>
<USER_FUNCTION>
<NAME>hb_color_line_get_color_stops_func_t</NAME>
<RETURNS>unsigned int</RETURNS>
hb_color_line_t *color_line, void *color_line_data, unsigned int start, unsigned int *count, hb_color_stop_t *color_stops, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_color_line_get_extend_func_t</NAME>
<RETURNS>hb_paint_extend_t</RETURNS>
hb_color_line_t *color_line, void *color_line_data, void *user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>hb_color_line_get_color_stops</NAME>
<RETURNS>unsigned int</RETURNS>
hb_color_line_t *color_line, unsigned int start, unsigned int *count, hb_color_stop_t *color_stops
</FUNCTION>
<FUNCTION>
<NAME>hb_color_line_get_extend</NAME>
<RETURNS>hb_paint_extend_t</RETURNS>
hb_color_line_t *color_line
</FUNCTION>
<USER_FUNCTION>
<NAME>hb_paint_linear_gradient_func_t</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, hb_color_line_t *color_line, float x0, float y0, float x1, float y1, float x2, float y2, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_paint_radial_gradient_func_t</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, hb_color_line_t *color_line, float x0, float y0, float r0, float x1, float y1, float r1, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_paint_sweep_gradient_func_t</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, hb_color_line_t *color_line, float x0, float y0, float start_angle, float end_angle, void *user_data
</USER_FUNCTION>
<ENUM>
<NAME>hb_paint_composite_mode_t</NAME>
typedef enum {
  HB_PAINT_COMPOSITE_MODE_CLEAR,
  HB_PAINT_COMPOSITE_MODE_SRC,
  HB_PAINT_COMPOSITE_MODE_DEST,
  HB_PAINT_COMPOSITE_MODE_SRC_OVER,
  HB_PAINT_COMPOSITE_MODE_DEST_OVER,
  HB_PAINT_COMPOSITE_MODE_SRC_IN,
  HB_PAINT_COMPOSITE_MODE_DEST_IN,
  HB_PAINT_COMPOSITE_MODE_SRC_OUT,
  HB_PAINT_COMPOSITE_MODE_DEST_OUT,
  HB_PAINT_COMPOSITE_MODE_SRC_ATOP,
  HB_PAINT_COMPOSITE_MODE_DEST_ATOP,
  HB_PAINT_COMPOSITE_MODE_XOR,
  HB_PAINT_COMPOSITE_MODE_PLUS,
  HB_PAINT_COMPOSITE_MODE_SCREEN,
  HB_PAINT_COMPOSITE_MODE_OVERLAY,
  HB_PAINT_COMPOSITE_MODE_DARKEN,
  HB_PAINT_COMPOSITE_MODE_LIGHTEN,
  HB_PAINT_COMPOSITE_MODE_COLOR_DODGE,
  HB_PAINT_COMPOSITE_MODE_COLOR_BURN,
  HB_PAINT_COMPOSITE_MODE_HARD_LIGHT,
  HB_PAINT_COMPOSITE_MODE_SOFT_LIGHT,
  HB_PAINT_COMPOSITE_MODE_DIFFERENCE,
  HB_PAINT_COMPOSITE_MODE_EXCLUSION,
  HB_PAINT_COMPOSITE_MODE_MULTIPLY,
  HB_PAINT_COMPOSITE_MODE_HSL_HUE,
  HB_PAINT_COMPOSITE_MODE_HSL_SATURATION,
  HB_PAINT_COMPOSITE_MODE_HSL_COLOR,
  HB_PAINT_COMPOSITE_MODE_HSL_LUMINOSITY
} hb_paint_composite_mode_t;
</ENUM>
<USER_FUNCTION>
<NAME>hb_paint_push_group_func_t</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_paint_pop_group_func_t</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, hb_paint_composite_mode_t mode, void *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_paint_custom_palette_color_func_t</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, unsigned int color_index, hb_color_t *color, void *user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_set_push_transform_func</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t               *funcs, hb_paint_push_transform_func_t  func, void                           *user_data, hb_destroy_func_t               destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_set_pop_transform_func</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t              *funcs, hb_paint_pop_transform_func_t  func, void                          *user_data, hb_destroy_func_t              destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_set_push_clip_glyph_func</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t                *funcs, hb_paint_push_clip_glyph_func_t  func, void                            *user_data, hb_destroy_func_t                destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_set_push_clip_rectangle_func</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t                    *funcs, hb_paint_push_clip_rectangle_func_t  func, void                                *user_data, hb_destroy_func_t                    destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_set_pop_clip_func</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t         *funcs, hb_paint_pop_clip_func_t  func, void                     *user_data, hb_destroy_func_t         destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_set_color_func</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t      *funcs, hb_paint_color_func_t  func, void                  *user_data, hb_destroy_func_t      destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_set_image_func</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t      *funcs, hb_paint_image_func_t  func, void                  *user_data, hb_destroy_func_t      destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_set_linear_gradient_func</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t                *funcs, hb_paint_linear_gradient_func_t  func, void                            *user_data, hb_destroy_func_t                destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_set_radial_gradient_func</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t                *funcs, hb_paint_radial_gradient_func_t  func, void                            *user_data, hb_destroy_func_t                destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_set_sweep_gradient_func</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t               *funcs, hb_paint_sweep_gradient_func_t  func, void                           *user_data, hb_destroy_func_t               destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_set_push_group_func</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t           *funcs, hb_paint_push_group_func_t  func, void                       *user_data, hb_destroy_func_t           destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_set_pop_group_func</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t          *funcs, hb_paint_pop_group_func_t  func, void                       *user_data, hb_destroy_func_t           destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_funcs_set_custom_palette_color_func</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t                     *funcs, hb_paint_custom_palette_color_func_t  func, void                                 *user_data, hb_destroy_func_t                     destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_push_transform</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, float xx, float yx, float xy, float yy, float dx, float dy
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_pop_transform</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_push_clip_glyph</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, hb_codepoint_t glyph, hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_push_clip_rectangle</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, float xmin, float ymin, float xmax, float ymax
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_pop_clip</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_color</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, hb_bool_t is_foreground, hb_color_t color
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_image</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, hb_blob_t *image, unsigned int width, unsigned int height, hb_tag_t format, float slant, hb_glyph_extents_t *extents
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_linear_gradient</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, hb_color_line_t *color_line, float x0, float y0, float x1, float y1, float x2, float y2
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_radial_gradient</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, hb_color_line_t *color_line, float x0, float y0, float r0, float x1, float y1, float r1
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_sweep_gradient</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, hb_color_line_t *color_line, float x0, float y0, float start_angle, float end_angle
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_push_group</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_pop_group</NAME>
<RETURNS>void</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, hb_paint_composite_mode_t mode
</FUNCTION>
<FUNCTION>
<NAME>hb_paint_custom_palette_color</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_paint_funcs_t *funcs, void *paint_data, unsigned int color_index, hb_color_t *color
</FUNCTION>
<MACRO>
<NAME>HB_SET_VALUE_INVALID</NAME>
#define HB_SET_VALUE_INVALID HB_CODEPOINT_INVALID
</MACRO>
<TYPEDEF>
<NAME>hb_set_t</NAME>
typedef struct hb_set_t hb_set_t;
</TYPEDEF>
<FUNCTION>
<NAME>hb_set_create</NAME>
<RETURNS>hb_set_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_set_get_empty</NAME>
<RETURNS>hb_set_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_set_reference</NAME>
<RETURNS>hb_set_t *</RETURNS>
hb_set_t *set
</FUNCTION>
<FUNCTION>
<NAME>hb_set_destroy</NAME>
<RETURNS>void</RETURNS>
hb_set_t *set
</FUNCTION>
<FUNCTION>
<NAME>hb_set_set_user_data</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_set_t           *set, hb_user_data_key_t *key, void *              data, hb_destroy_func_t   destroy, hb_bool_t           replace
</FUNCTION>
<FUNCTION>
<NAME>hb_set_get_user_data</NAME>
<RETURNS>void *</RETURNS>
const hb_set_t     *set, hb_user_data_key_t *key
</FUNCTION>
<FUNCTION>
<NAME>hb_set_allocation_successful</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_set_t *set
</FUNCTION>
<FUNCTION>
<NAME>hb_set_copy</NAME>
<RETURNS>hb_set_t *</RETURNS>
const hb_set_t *set
</FUNCTION>
<FUNCTION>
<NAME>hb_set_clear</NAME>
<RETURNS>void</RETURNS>
hb_set_t *set
</FUNCTION>
<FUNCTION>
<NAME>hb_set_is_empty</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_set_t *set
</FUNCTION>
<FUNCTION>
<NAME>hb_set_invert</NAME>
<RETURNS>void</RETURNS>
hb_set_t *set
</FUNCTION>
<FUNCTION>
<NAME>hb_set_is_inverted</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_set_t *set
</FUNCTION>
<FUNCTION>
<NAME>hb_set_has</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_set_t *set, hb_codepoint_t  codepoint
</FUNCTION>
<FUNCTION>
<NAME>hb_set_add</NAME>
<RETURNS>void</RETURNS>
hb_set_t       *set, hb_codepoint_t  codepoint
</FUNCTION>
<FUNCTION>
<NAME>hb_set_add_range</NAME>
<RETURNS>void</RETURNS>
hb_set_t       *set, hb_codepoint_t  first, hb_codepoint_t  last
</FUNCTION>
<FUNCTION>
<NAME>hb_set_add_sorted_array</NAME>
<RETURNS>void</RETURNS>
hb_set_t             *set, const hb_codepoint_t *sorted_codepoints, unsigned int          num_codepoints
</FUNCTION>
<FUNCTION>
<NAME>hb_set_del</NAME>
<RETURNS>void</RETURNS>
hb_set_t       *set, hb_codepoint_t  codepoint
</FUNCTION>
<FUNCTION>
<NAME>hb_set_del_range</NAME>
<RETURNS>void</RETURNS>
hb_set_t       *set, hb_codepoint_t  first, hb_codepoint_t  last
</FUNCTION>
<FUNCTION>
<NAME>hb_set_is_equal</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_set_t *set, const hb_set_t *other
</FUNCTION>
<FUNCTION>
<NAME>hb_set_hash</NAME>
<RETURNS>unsigned int</RETURNS>
const hb_set_t *set
</FUNCTION>
<FUNCTION>
<NAME>hb_set_is_subset</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_set_t *set, const hb_set_t *larger_set
</FUNCTION>
<FUNCTION>
<NAME>hb_set_set</NAME>
<RETURNS>void</RETURNS>
hb_set_t       *set, const hb_set_t *other
</FUNCTION>
<FUNCTION>
<NAME>hb_set_union</NAME>
<RETURNS>void</RETURNS>
hb_set_t       *set, const hb_set_t *other
</FUNCTION>
<FUNCTION>
<NAME>hb_set_intersect</NAME>
<RETURNS>void</RETURNS>
hb_set_t       *set, const hb_set_t *other
</FUNCTION>
<FUNCTION>
<NAME>hb_set_subtract</NAME>
<RETURNS>void</RETURNS>
hb_set_t       *set, const hb_set_t *other
</FUNCTION>
<FUNCTION>
<NAME>hb_set_symmetric_difference</NAME>
<RETURNS>void</RETURNS>
hb_set_t       *set, const hb_set_t *other
</FUNCTION>
<FUNCTION>
<NAME>hb_set_get_population</NAME>
<RETURNS>unsigned int</RETURNS>
const hb_set_t *set
</FUNCTION>
<FUNCTION>
<NAME>hb_set_get_min</NAME>
<RETURNS>hb_codepoint_t</RETURNS>
const hb_set_t *set
</FUNCTION>
<FUNCTION>
<NAME>hb_set_get_max</NAME>
<RETURNS>hb_codepoint_t</RETURNS>
const hb_set_t *set
</FUNCTION>
<FUNCTION>
<NAME>hb_set_next</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_set_t *set, hb_codepoint_t *codepoint
</FUNCTION>
<FUNCTION>
<NAME>hb_set_previous</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_set_t *set, hb_codepoint_t *codepoint
</FUNCTION>
<FUNCTION>
<NAME>hb_set_next_range</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_set_t *set, hb_codepoint_t *first, hb_codepoint_t *last
</FUNCTION>
<FUNCTION>
<NAME>hb_set_previous_range</NAME>
<RETURNS>hb_bool_t</RETURNS>
const hb_set_t *set, hb_codepoint_t *first, hb_codepoint_t *last
</FUNCTION>
<FUNCTION>
<NAME>hb_set_next_many</NAME>
<RETURNS>unsigned int</RETURNS>
const hb_set_t *set, hb_codepoint_t  codepoint, hb_codepoint_t *out, unsigned int    size
</FUNCTION>
<TYPEDEF>
<NAME>hb_shape_plan_t</NAME>
typedef struct hb_shape_plan_t hb_shape_plan_t;
</TYPEDEF>
<FUNCTION>
<NAME>hb_shape_plan_create</NAME>
<RETURNS>hb_shape_plan_t *</RETURNS>
hb_face_t                     *face, const hb_segment_properties_t *props, const hb_feature_t            *user_features, unsigned int                   num_user_features, const char * const            *shaper_list
</FUNCTION>
<FUNCTION>
<NAME>hb_shape_plan_create_cached</NAME>
<RETURNS>hb_shape_plan_t *</RETURNS>
hb_face_t                     *face, const hb_segment_properties_t *props, const hb_feature_t            *user_features, unsigned int                   num_user_features, const char * const            *shaper_list
</FUNCTION>
<FUNCTION>
<NAME>hb_shape_plan_create2</NAME>
<RETURNS>hb_shape_plan_t *</RETURNS>
hb_face_t                     *face, const hb_segment_properties_t *props, const hb_feature_t            *user_features, unsigned int                   num_user_features, const int                     *coords, unsigned int                   num_coords, const char * const            *shaper_list
</FUNCTION>
<FUNCTION>
<NAME>hb_shape_plan_create_cached2</NAME>
<RETURNS>hb_shape_plan_t *</RETURNS>
hb_face_t                     *face, const hb_segment_properties_t *props, const hb_feature_t            *user_features, unsigned int                   num_user_features, const int                     *coords, unsigned int                   num_coords, const char * const            *shaper_list
</FUNCTION>
<FUNCTION>
<NAME>hb_shape_plan_get_empty</NAME>
<RETURNS>hb_shape_plan_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_shape_plan_reference</NAME>
<RETURNS>hb_shape_plan_t *</RETURNS>
hb_shape_plan_t *shape_plan
</FUNCTION>
<FUNCTION>
<NAME>hb_shape_plan_destroy</NAME>
<RETURNS>void</RETURNS>
hb_shape_plan_t *shape_plan
</FUNCTION>
<FUNCTION>
<NAME>hb_shape_plan_set_user_data</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_shape_plan_t    *shape_plan, hb_user_data_key_t *key, void *              data, hb_destroy_func_t   destroy, hb_bool_t           replace
</FUNCTION>
<FUNCTION>
<NAME>hb_shape_plan_get_user_data</NAME>
<RETURNS>void *</RETURNS>
const hb_shape_plan_t *shape_plan, hb_user_data_key_t    *key
</FUNCTION>
<FUNCTION>
<NAME>hb_shape_plan_execute</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_shape_plan_t    *shape_plan, hb_font_t          *font, hb_buffer_t        *buffer, const hb_feature_t *features, unsigned int        num_features
</FUNCTION>
<FUNCTION>
<NAME>hb_shape_plan_get_shaper</NAME>
<RETURNS>const char *</RETURNS>
hb_shape_plan_t *shape_plan
</FUNCTION>
<FUNCTION>
<NAME>hb_shape</NAME>
<RETURNS>void</RETURNS>
hb_font_t           *font, hb_buffer_t         *buffer, const hb_feature_t  *features, unsigned int         num_features
</FUNCTION>
<FUNCTION>
<NAME>hb_shape_full</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t          *font, hb_buffer_t        *buffer, const hb_feature_t *features, unsigned int        num_features, const char * const *shaper_list
</FUNCTION>
<FUNCTION>
<NAME>hb_shape_justify</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_font_t          *font, hb_buffer_t        *buffer, const hb_feature_t *features, unsigned int        num_features, const char * const *shaper_list, float               min_target_advance, float               max_target_advance, float              *advance, hb_tag_t           *var_tag, float              *var_value
</FUNCTION>
<FUNCTION>
<NAME>hb_shape_list_shapers</NAME>
<RETURNS>const char **</RETURNS>
void
</FUNCTION>
<ENUM>
<NAME>hb_style_tag_t</NAME>
typedef enum
{
  HB_STYLE_TAG_ITALIC		= HB_TAG ('i','t','a','l'),
  HB_STYLE_TAG_OPTICAL_SIZE	= HB_TAG ('o','p','s','z'),
  HB_STYLE_TAG_SLANT_ANGLE	= HB_TAG ('s','l','n','t'),
  HB_STYLE_TAG_SLANT_RATIO	= HB_TAG ('S','l','n','t'),
  HB_STYLE_TAG_WIDTH		= HB_TAG ('w','d','t','h'),
  HB_STYLE_TAG_WEIGHT		= HB_TAG ('w','g','h','t'),

  /*< private >*/
  _HB_STYLE_TAG_MAX_VALUE	= HB_TAG_MAX_SIGNED /*< skip >*/
} hb_style_tag_t;
</ENUM>
<FUNCTION>
<NAME>hb_style_get_value</NAME>
<RETURNS>float</RETURNS>
hb_font_t *font, hb_style_tag_t style_tag
</FUNCTION>
<STRUCT>
<NAME>hb_link_t</NAME>
struct hb_link_t
{
  unsigned width;
  unsigned position;
  unsigned objidx;
};
</STRUCT>
<STRUCT>
<NAME>hb_object_t</NAME>
struct hb_object_t
{
  char *head;
  char *tail;
  unsigned num_real_links;
  hb_link_t *real_links;
  unsigned num_virtual_links;
  hb_link_t *virtual_links;
};
</STRUCT>
<FUNCTION>
<NAME>hb_subset_repack_or_fail</NAME>
<RETURNS>hb_blob_t *</RETURNS>
hb_tag_t table_tag, hb_object_t* hb_objects, unsigned num_hb_objs
</FUNCTION>
<TYPEDEF>
<NAME>hb_subset_input_t</NAME>
typedef struct hb_subset_input_t hb_subset_input_t;
</TYPEDEF>
<TYPEDEF>
<NAME>hb_subset_plan_t</NAME>
typedef struct hb_subset_plan_t hb_subset_plan_t;
</TYPEDEF>
<ENUM>
<NAME>hb_subset_flags_t</NAME>
typedef enum { /*< flags >*/
  HB_SUBSET_FLAGS_DEFAULT =		     0x00000000u,
  HB_SUBSET_FLAGS_NO_HINTING =		     0x00000001u,
  HB_SUBSET_FLAGS_RETAIN_GIDS =		     0x00000002u,
  HB_SUBSET_FLAGS_DESUBROUTINIZE =	     0x00000004u,
  HB_SUBSET_FLAGS_NAME_LEGACY =		     0x00000008u,
  HB_SUBSET_FLAGS_SET_OVERLAPS_FLAG =	     0x00000010u,
  HB_SUBSET_FLAGS_PASSTHROUGH_UNRECOGNIZED = 0x00000020u,
  HB_SUBSET_FLAGS_NOTDEF_OUTLINE =	     0x00000040u,
  HB_SUBSET_FLAGS_GLYPH_NAMES =		     0x00000080u,
  HB_SUBSET_FLAGS_NO_PRUNE_UNICODE_RANGES =  0x00000100u,
  HB_SUBSET_FLAGS_NO_LAYOUT_CLOSURE =        0x00000200u,
} hb_subset_flags_t;
</ENUM>
<ENUM>
<NAME>hb_subset_sets_t</NAME>
typedef enum {
  HB_SUBSET_SETS_GLYPH_INDEX = 0,
  HB_SUBSET_SETS_UNICODE,
  HB_SUBSET_SETS_NO_SUBSET_TABLE_TAG,
  HB_SUBSET_SETS_DROP_TABLE_TAG,
  HB_SUBSET_SETS_NAME_ID,
  HB_SUBSET_SETS_NAME_LANG_ID,
  HB_SUBSET_SETS_LAYOUT_FEATURE_TAG,
  HB_SUBSET_SETS_LAYOUT_SCRIPT_TAG,
} hb_subset_sets_t;
</ENUM>
<FUNCTION>
<NAME>hb_subset_input_create_or_fail</NAME>
<RETURNS>hb_subset_input_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_input_reference</NAME>
<RETURNS>hb_subset_input_t *</RETURNS>
hb_subset_input_t *input
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_input_destroy</NAME>
<RETURNS>void</RETURNS>
hb_subset_input_t *input
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_input_set_user_data</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_subset_input_t  *input, hb_user_data_key_t *key, void *		   data, hb_destroy_func_t   destroy, hb_bool_t	   replace
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_input_get_user_data</NAME>
<RETURNS>void *</RETURNS>
const hb_subset_input_t *input, hb_user_data_key_t      *key
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_input_keep_everything</NAME>
<RETURNS>void</RETURNS>
hb_subset_input_t *input
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_input_unicode_set</NAME>
<RETURNS>hb_set_t *</RETURNS>
hb_subset_input_t *input
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_input_glyph_set</NAME>
<RETURNS>hb_set_t *</RETURNS>
hb_subset_input_t *input
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_input_set</NAME>
<RETURNS>hb_set_t *</RETURNS>
hb_subset_input_t *input, hb_subset_sets_t set_type
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_input_old_to_new_glyph_mapping</NAME>
<RETURNS>hb_map_t *</RETURNS>
hb_subset_input_t *input
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_input_get_flags</NAME>
<RETURNS>hb_subset_flags_t</RETURNS>
hb_subset_input_t *input
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_input_set_flags</NAME>
<RETURNS>void</RETURNS>
hb_subset_input_t *input, unsigned value
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_input_pin_axis_to_default</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_subset_input_t  *input, hb_face_t          *face, hb_tag_t            axis_tag
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_input_pin_axis_location</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_subset_input_t  *input, hb_face_t          *face, hb_tag_t            axis_tag, float               axis_value
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_input_set_axis_range</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_subset_input_t  *input, hb_face_t          *face, hb_tag_t            axis_tag, float               axis_min_value, float               axis_max_value
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_input_override_name_table</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_subset_input_t  *input, hb_ot_name_id_t     name_id, unsigned            platform_id, unsigned            encoding_id, unsigned            language_id, const char         *name_str, int                 str_len
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_preprocess</NAME>
<RETURNS>hb_face_t *</RETURNS>
hb_face_t *source
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_or_fail</NAME>
<RETURNS>hb_face_t *</RETURNS>
hb_face_t *source, const hb_subset_input_t *input
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_plan_execute_or_fail</NAME>
<RETURNS>hb_face_t *</RETURNS>
hb_subset_plan_t *plan
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_plan_create_or_fail</NAME>
<RETURNS>hb_subset_plan_t *</RETURNS>
hb_face_t                 *face, const hb_subset_input_t   *input
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_plan_destroy</NAME>
<RETURNS>void</RETURNS>
hb_subset_plan_t *plan
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_plan_old_to_new_glyph_mapping</NAME>
<RETURNS>hb_map_t *</RETURNS>
const hb_subset_plan_t *plan
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_plan_new_to_old_glyph_mapping</NAME>
<RETURNS>hb_map_t *</RETURNS>
const hb_subset_plan_t *plan
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_plan_unicode_to_old_glyph_mapping</NAME>
<RETURNS>hb_map_t *</RETURNS>
const hb_subset_plan_t *plan
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_plan_reference</NAME>
<RETURNS>hb_subset_plan_t *</RETURNS>
hb_subset_plan_t *plan
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_plan_set_user_data</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_subset_plan_t   *plan, hb_user_data_key_t *key, void               *data, hb_destroy_func_t   destroy, hb_bool_t	          replace
</FUNCTION>
<FUNCTION>
<NAME>hb_subset_plan_get_user_data</NAME>
<RETURNS>void *</RETURNS>
const hb_subset_plan_t *plan, hb_user_data_key_t     *key
</FUNCTION>
<MACRO>
<NAME>HB_UNICODE_MAX</NAME>
#define HB_UNICODE_MAX 0x10FFFFu
</MACRO>
<ENUM>
<NAME>hb_unicode_general_category_t</NAME>
typedef enum
{
  HB_UNICODE_GENERAL_CATEGORY_CONTROL,			/* Cc */
  HB_UNICODE_GENERAL_CATEGORY_FORMAT,			/* Cf */
  HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED,		/* Cn */
  HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE,		/* Co */
  HB_UNICODE_GENERAL_CATEGORY_SURROGATE,		/* Cs */
  HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER,		/* Ll */
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER,		/* Lm */
  HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER,		/* Lo */
  HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER,		/* Lt */
  HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER,		/* Lu */
  HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK,		/* Mc */
  HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK,		/* Me */
  HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK,		/* Mn */
  HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER,		/* Nd */
  HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER,		/* Nl */
  HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER,		/* No */
  HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION,	/* Pc */
  HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION,		/* Pd */
  HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION,	/* Pe */
  HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION,	/* Pf */
  HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION,	/* Pi */
  HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION,	/* Po */
  HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION,		/* Ps */
  HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL,		/* Sc */
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL,		/* Sk */
  HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL,		/* Sm */
  HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL,		/* So */
  HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR,		/* Zl */
  HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR,	/* Zp */
  HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR		/* Zs */
} hb_unicode_general_category_t;
</ENUM>
<ENUM>
<NAME>hb_unicode_combining_class_t</NAME>
typedef enum
{
  HB_UNICODE_COMBINING_CLASS_NOT_REORDERED	= 0,
  HB_UNICODE_COMBINING_CLASS_OVERLAY		= 1,
  HB_UNICODE_COMBINING_CLASS_NUKTA		= 7,
  HB_UNICODE_COMBINING_CLASS_KANA_VOICING	= 8,
  HB_UNICODE_COMBINING_CLASS_VIRAMA		= 9,

  /* Hebrew */
  HB_UNICODE_COMBINING_CLASS_CCC10	=  10,
  HB_UNICODE_COMBINING_CLASS_CCC11	=  11,
  HB_UNICODE_COMBINING_CLASS_CCC12	=  12,
  HB_UNICODE_COMBINING_CLASS_CCC13	=  13,
  HB_UNICODE_COMBINING_CLASS_CCC14	=  14,
  HB_UNICODE_COMBINING_CLASS_CCC15	=  15,
  HB_UNICODE_COMBINING_CLASS_CCC16	=  16,
  HB_UNICODE_COMBINING_CLASS_CCC17	=  17,
  HB_UNICODE_COMBINING_CLASS_CCC18	=  18,
  HB_UNICODE_COMBINING_CLASS_CCC19	=  19,
  HB_UNICODE_COMBINING_CLASS_CCC20	=  20,
  HB_UNICODE_COMBINING_CLASS_CCC21	=  21,
  HB_UNICODE_COMBINING_CLASS_CCC22	=  22,
  HB_UNICODE_COMBINING_CLASS_CCC23	=  23,
  HB_UNICODE_COMBINING_CLASS_CCC24	=  24,
  HB_UNICODE_COMBINING_CLASS_CCC25	=  25,
  HB_UNICODE_COMBINING_CLASS_CCC26	=  26,

  /* Arabic */
  HB_UNICODE_COMBINING_CLASS_CCC27	=  27,
  HB_UNICODE_COMBINING_CLASS_CCC28	=  28,
  HB_UNICODE_COMBINING_CLASS_CCC29	=  29,
  HB_UNICODE_COMBINING_CLASS_CCC30	=  30,
  HB_UNICODE_COMBINING_CLASS_CCC31	=  31,
  HB_UNICODE_COMBINING_CLASS_CCC32	=  32,
  HB_UNICODE_COMBINING_CLASS_CCC33	=  33,
  HB_UNICODE_COMBINING_CLASS_CCC34	=  34,
  HB_UNICODE_COMBINING_CLASS_CCC35	=  35,

  /* Syriac */
  HB_UNICODE_COMBINING_CLASS_CCC36	=  36,

  /* Telugu */
  HB_UNICODE_COMBINING_CLASS_CCC84	=  84,
  HB_UNICODE_COMBINING_CLASS_CCC91	=  91,

  /* Thai */
  HB_UNICODE_COMBINING_CLASS_CCC103	= 103,
  HB_UNICODE_COMBINING_CLASS_CCC107	= 107,

  /* Lao */
  HB_UNICODE_COMBINING_CLASS_CCC118	= 118,
  HB_UNICODE_COMBINING_CLASS_CCC122	= 122,

  /* Tibetan */
  HB_UNICODE_COMBINING_CLASS_CCC129	= 129,
  HB_UNICODE_COMBINING_CLASS_CCC130	= 130,
  HB_UNICODE_COMBINING_CLASS_CCC132	= 132,


  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT	= 200,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW		= 202,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE		= 214,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT	= 216,
  HB_UNICODE_COMBINING_CLASS_BELOW_LEFT			= 218,
  HB_UNICODE_COMBINING_CLASS_BELOW			= 220,
  HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT		= 222,
  HB_UNICODE_COMBINING_CLASS_LEFT			= 224,
  HB_UNICODE_COMBINING_CLASS_RIGHT			= 226,
  HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT			= 228,
  HB_UNICODE_COMBINING_CLASS_ABOVE			= 230,
  HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT		= 232,
  HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW		= 233,
  HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE		= 234,

  HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT		= 240,

  HB_UNICODE_COMBINING_CLASS_INVALID	= 255
} hb_unicode_combining_class_t;
</ENUM>
<TYPEDEF>
<NAME>hb_unicode_funcs_t</NAME>
typedef struct hb_unicode_funcs_t hb_unicode_funcs_t;
</TYPEDEF>
<FUNCTION>
<NAME>hb_unicode_funcs_get_default</NAME>
<RETURNS>hb_unicode_funcs_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_funcs_create</NAME>
<RETURNS>hb_unicode_funcs_t *</RETURNS>
hb_unicode_funcs_t *parent
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_funcs_get_empty</NAME>
<RETURNS>hb_unicode_funcs_t *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_funcs_reference</NAME>
<RETURNS>hb_unicode_funcs_t *</RETURNS>
hb_unicode_funcs_t *ufuncs
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_funcs_destroy</NAME>
<RETURNS>void</RETURNS>
hb_unicode_funcs_t *ufuncs
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_funcs_set_user_data</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_user_data_key_t *key, void *              data, hb_destroy_func_t   destroy, hb_bool_t           replace
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_funcs_get_user_data</NAME>
<RETURNS>void *</RETURNS>
const hb_unicode_funcs_t *ufuncs, hb_user_data_key_t       *key
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_funcs_make_immutable</NAME>
<RETURNS>void</RETURNS>
hb_unicode_funcs_t *ufuncs
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_funcs_is_immutable</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_unicode_funcs_t *ufuncs
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_funcs_get_parent</NAME>
<RETURNS>hb_unicode_funcs_t *</RETURNS>
hb_unicode_funcs_t *ufuncs
</FUNCTION>
<USER_FUNCTION>
<NAME>hb_unicode_combining_class_func_t</NAME>
<RETURNS>hb_unicode_combining_class_t</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_codepoint_t      unicode, void               *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_unicode_general_category_func_t</NAME>
<RETURNS>hb_unicode_general_category_t</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_codepoint_t      unicode, void               *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_unicode_mirroring_func_t</NAME>
<RETURNS>hb_codepoint_t</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_codepoint_t      unicode, void               *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_unicode_script_func_t</NAME>
<RETURNS>hb_script_t</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_codepoint_t      unicode, void               *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_unicode_compose_func_t</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_codepoint_t      a, hb_codepoint_t      b, hb_codepoint_t     *ab, void               *user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hb_unicode_decompose_func_t</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_codepoint_t      ab, hb_codepoint_t     *a, hb_codepoint_t     *b, void               *user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>hb_unicode_funcs_set_combining_class_func</NAME>
<RETURNS>void</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_unicode_combining_class_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_funcs_set_general_category_func</NAME>
<RETURNS>void</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_unicode_general_category_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_funcs_set_mirroring_func</NAME>
<RETURNS>void</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_unicode_mirroring_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_funcs_set_script_func</NAME>
<RETURNS>void</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_unicode_script_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_funcs_set_compose_func</NAME>
<RETURNS>void</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_unicode_compose_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_funcs_set_decompose_func</NAME>
<RETURNS>void</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_unicode_decompose_func_t func, void *user_data, hb_destroy_func_t destroy
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_combining_class</NAME>
<RETURNS>hb_unicode_combining_class_t</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_general_category</NAME>
<RETURNS>hb_unicode_general_category_t</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_mirroring</NAME>
<RETURNS>hb_codepoint_t</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_script</NAME>
<RETURNS>hb_script_t</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_compose</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_codepoint_t      a, hb_codepoint_t      b, hb_codepoint_t     *ab
</FUNCTION>
<FUNCTION>
<NAME>hb_unicode_decompose</NAME>
<RETURNS>hb_bool_t</RETURNS>
hb_unicode_funcs_t *ufuncs, hb_codepoint_t      ab, hb_codepoint_t     *a, hb_codepoint_t     *b
</FUNCTION>
<FUNCTION>
<NAME>hb_uniscribe_font_get_logfontw</NAME>
<RETURNS>LOGFONTW *</RETURNS>
hb_font_t *font
</FUNCTION>
<FUNCTION>
<NAME>hb_uniscribe_font_get_hfont</NAME>
<RETURNS>HFONT</RETURNS>
hb_font_t *font
</FUNCTION>
<MACRO>
<NAME>HB_VERSION_MAJOR</NAME>
#define HB_VERSION_MAJOR 8
</MACRO>
<MACRO>
<NAME>HB_VERSION_MINOR</NAME>
#define HB_VERSION_MINOR 1
</MACRO>
<MACRO>
<NAME>HB_VERSION_MICRO</NAME>
#define HB_VERSION_MICRO 1
</MACRO>
<MACRO>
<NAME>HB_VERSION_STRING</NAME>
#define HB_VERSION_STRING "8.1.1"
</MACRO>
<MACRO>
<NAME>HB_VERSION_ATLEAST</NAME>
#define HB_VERSION_ATLEAST(major,minor,micro) \
	((major)*10000+(minor)*100+(micro) <= \
	 HB_VERSION_MAJOR*10000+HB_VERSION_MINOR*100+HB_VERSION_MICRO)
</MACRO>
<FUNCTION>
<NAME>hb_version</NAME>
<RETURNS>void</RETURNS>
unsigned int *major, unsigned int *minor, unsigned int *micro
</FUNCTION>
<FUNCTION>
<NAME>hb_version_string</NAME>
<RETURNS>const char *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_version_atleast</NAME>
<RETURNS>hb_bool_t</RETURNS>
unsigned int major, unsigned int minor, unsigned int micro
</FUNCTION>
<MACRO>
<NAME>HB_H_IN</NAME>
#define HB_H_IN
</MACRO>
<MACRO>
<NAME>HB_HAS_CAIRO</NAME>
#define HB_HAS_CAIRO 1
</MACRO>
<MACRO>
<NAME>HB_HAS_CORETEXT</NAME>
#define HB_HAS_CORETEXT 1
</MACRO>
<MACRO>
<NAME>HB_HAS_DIRECTWRITE</NAME>
#define HB_HAS_DIRECTWRITE 1
</MACRO>
<MACRO>
<NAME>HB_HAS_FREETYPE</NAME>
#define HB_HAS_FREETYPE 1
</MACRO>
<MACRO>
<NAME>HB_HAS_GDI</NAME>
#define HB_HAS_GDI 1
</MACRO>
<MACRO>
<NAME>HB_HAS_GLIB</NAME>
#define HB_HAS_GLIB 1
</MACRO>
<MACRO>
<NAME>HB_HAS_GOBJECT</NAME>
#define HB_HAS_GOBJECT 1
</MACRO>
<MACRO>
<NAME>HB_HAS_GRAPHITE</NAME>
#define HB_HAS_GRAPHITE 1
</MACRO>
<MACRO>
<NAME>HB_HAS_ICU</NAME>
#define HB_HAS_ICU 1
</MACRO>
<MACRO>
<NAME>HB_HAS_UNISCRIBE</NAME>
#define HB_HAS_UNISCRIBE 1
</MACRO>
<MACRO>
<NAME>HB_HAS_WASM</NAME>
#define HB_HAS_WASM 1
</MACRO>
<MACRO>
<NAME>HB_VERSION_MAJOR</NAME>
#define HB_VERSION_MAJOR 8
</MACRO>
<MACRO>
<NAME>HB_VERSION_MINOR</NAME>
#define HB_VERSION_MINOR 1
</MACRO>
<MACRO>
<NAME>HB_VERSION_MICRO</NAME>
#define HB_VERSION_MICRO 1
</MACRO>
<MACRO>
<NAME>HB_VERSION_STRING</NAME>
#define HB_VERSION_STRING "8.1.1"
</MACRO>
<MACRO>
<NAME>HB_VERSION_ATLEAST</NAME>
#define HB_VERSION_ATLEAST(major,minor,micro) \
	((major)*10000+(minor)*100+(micro) <= \
	 HB_VERSION_MAJOR*10000+HB_VERSION_MINOR*100+HB_VERSION_MICRO)
</MACRO>
<FUNCTION>
<NAME>hb_version</NAME>
<RETURNS>void</RETURNS>
unsigned int *major, unsigned int *minor, unsigned int *micro
</FUNCTION>
<FUNCTION>
<NAME>hb_version_string</NAME>
<RETURNS>const char *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>hb_version_atleast</NAME>
<RETURNS>hb_bool_t</RETURNS>
unsigned int major, unsigned int minor, unsigned int micro
</FUNCTION>
