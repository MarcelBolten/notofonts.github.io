<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
  <!ENTITY version SYSTEM "version.xml">
]>
<refentry id="harfbuzz-hb-face">
<refmeta>
<refentrytitle role="top_of_page" id="harfbuzz-hb-face.top_of_page">hb-face</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>HARFBUZZ Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>hb-face</refname>
<refpurpose>Font face objects</refpurpose>
</refnamediv>

<refsect1 id="harfbuzz-hb-face.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_proto_type" colwidth="150px"/>
<colspec colname="functions_proto_name"/>
<tbody>
<row><entry role="function_type">unsigned <link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-count">hb_face_count</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="hb-face-t"><returnvalue>hb_face_t</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="hb-face-create">hb_face_create</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="hb-face-t"><returnvalue>hb_face_t</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="hb-face-create-for-tables">hb_face_create_for_tables</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="hb-face-t"><returnvalue>hb_face_t</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="hb-face-get-empty">hb_face_get_empty</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="hb-face-t"><returnvalue>hb_face_t</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="hb-face-reference">hb_face_reference</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-destroy">hb_face_destroy</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="hb-bool-t"><returnvalue>hb_bool_t</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-set-user-data">hb_face_set_user_data</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="hb-face-get-user-data">hb_face_get_user_data</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-make-immutable">hb_face_make_immutable</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="hb-bool-t"><returnvalue>hb_bool_t</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-is-immutable">hb_face_is_immutable</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">unsigned <link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-get-table-tags">hb_face_get_table_tags</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-set-glyph-count">hb_face_set_glyph_count</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">unsigned <link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-get-glyph-count">hb_face_get_glyph_count</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-set-index">hb_face_set_index</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">unsigned <link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-get-index">hb_face_get_index</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-set-upem">hb_face_set_upem</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">unsigned <link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-get-upem">hb_face_get_upem</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="hb-blob-t"><returnvalue>hb_blob_t</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="hb-face-reference-blob">hb_face_reference_blob</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="hb-blob-t"><returnvalue>hb_blob_t</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="hb-face-reference-table">hb_face_reference_table</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-collect-unicodes">hb_face_collect_unicodes</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-collect-nominal-glyph-mapping">hb_face_collect_nominal_glyph_mapping</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-collect-variation-selectors">hb_face_collect_variation_selectors</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-collect-variation-unicodes">hb_face_collect_variation_unicodes</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="hb-face-t"><returnvalue>hb_face_t</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="hb-face-builder-create">hb_face_builder_create</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="hb-bool-t"><returnvalue>hb_bool_t</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-builder-add-table">hb_face_builder_add_table</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="hb-face-builder-sort-tables">hb_face_builder_sort_tables</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="harfbuzz-hb-face.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="other_proto_type" colwidth="150px"/>
<colspec colname="other_proto_name"/>
<tbody>
<row><entry role="typedef_keyword">typedef</entry><entry role="function_name"><link linkend="hb-face-t">hb_face_t</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>

<refsect1 id="harfbuzz-hb-face.includes"><title>Includes</title><synopsis>#include &lt;hb.h&gt;
</synopsis></refsect1>

<refsect1 id="harfbuzz-hb-face.description" role="desc">
<title role="desc.title">Description</title>
<para>A font face is an object that represents a single face from within a
font family.</para>
<para>More precisely, a font face represents a single face in a binary font file.
Font faces are typically built from a binary blob and a face index.
Font faces are used to create fonts.</para>
<para>A font face can be created from a binary blob using <link linkend="hb-face-create"><function>hb_face_create()</function></link>.
The face index is used to select a face from a binary blob that contains
multiple faces.  For example, a binary blob that contains both a regular
and a bold face can be used to create two font faces, one for each face
index.</para>

</refsect1>
<refsect1 id="harfbuzz-hb-face.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="hb-face-count" role="function" condition="since:1.7.7">
<title>hb_face_count&#160;()</title>
<indexterm zone="hb-face-count" role="1.7.7"><primary>hb_face_count</primary></indexterm>
<programlisting language="C">unsigned <link linkend="int"><returnvalue>int</returnvalue></link>
hb_face_count (<parameter><link linkend="hb-blob-t"><type>hb_blob_t</type></link> *blob</parameter>);</programlisting>
<para>Fetches the number of faces in a blob.</para>
<refsect3 id="hb-face-count.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>blob</para></entry>
<entry role="parameter_description"><para>a blob.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="hb-face-count.returns" role="returns">
<title>Returns</title>
<para> Number of faces in <parameter>blob</parameter>
</para>
</refsect3><para role="since">Since: <link linkend="api-index-1.7.7">1.7.7</link></para></refsect2>
<refsect2 id="hb-face-create" role="function" condition="since:0.9.2">
<title>hb_face_create&#160;()</title>
<indexterm zone="hb-face-create" role="0.9.2"><primary>hb_face_create</primary></indexterm>
<programlisting language="C"><link linkend="hb-face-t"><returnvalue>hb_face_t</returnvalue></link>&#160;*
hb_face_create (<parameter><link linkend="hb-blob-t"><type>hb_blob_t</type></link> *blob</parameter>,
                <parameter>unsigned <link linkend="int"><type>int</type></link> index</parameter>);</programlisting>
<para>Constructs a new face object from the specified blob and
a face index into that blob.</para>
<para>The face index is used for blobs of file formats such as TTC and
DFont that can contain more than one face.  Face indices within
such collections are zero-based.</para>
<note>Note: If the blob font format is not a collection, <parameter>index</parameter>
is ignored.  Otherwise, only the lower 16-bits of <parameter>index</parameter> are used.
The unmodified <parameter>index</parameter> can be accessed via <link linkend="hb-face-get-index"><function>hb_face_get_index()</function></link>.</note>
<note>Note: The high 16-bits of <parameter>index</parameter>, if non-zero, are used by
<link linkend="hb-font-create"><function>hb_font_create()</function></link> to load named-instances in variable fonts.  See
<link linkend="hb-font-create"><function>hb_font_create()</function></link> for details.</note>
<refsect3 id="hb-face-create.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>blob</para></entry>
<entry role="parameter_description"><para><link linkend="hb-blob-t"><type>hb_blob_t</type></link> to work upon</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>The index of the face within <parameter>blob</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="hb-face-create.returns" role="returns">
<title>Returns</title>
<para>The new face object. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.2">0.9.2</link></para></refsect2>
<refsect2 id="hb-face-create-for-tables" role="function" condition="since:0.9.2">
<title>hb_face_create_for_tables&#160;()</title>
<indexterm zone="hb-face-create-for-tables" role="0.9.2"><primary>hb_face_create_for_tables</primary></indexterm>
<programlisting language="C"><link linkend="hb-face-t"><returnvalue>hb_face_t</returnvalue></link>&#160;*
hb_face_create_for_tables (<parameter><link linkend="hb-reference-table-func-t"><type>hb_reference_table_func_t</type></link> reference_table_func</parameter>,
                           <parameter><link linkend="void"><type>void</type></link> *user_data</parameter>,
                           <parameter><link linkend="hb-destroy-func-t"><type>hb_destroy_func_t</type></link> destroy</parameter>);</programlisting>
<para>Variant of <link linkend="hb-face-create"><function>hb_face_create()</function></link>, built for those cases where it is more
convenient to provide data for individual tables instead of the whole font
data. With the caveat that <link linkend="hb-face-get-table-tags"><function>hb_face_get_table_tags()</function></link> does not currently work
with faces created this way.</para>
<para>Creates a new face object from the specified <parameter>user_data</parameter>
 and <parameter>reference_table_func</parameter>
,
with the <parameter>destroy</parameter>
 callback.</para>
<refsect3 id="hb-face-create-for-tables.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>reference_table_func</para></entry>
<entry role="parameter_description"><para>Table-referencing function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym> user_data][<acronym>destroy</acronym> destroy][<acronym>scope notified</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>A pointer to the user data</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>destroy</para></entry>
<entry role="parameter_description"><para>A callback to call when <parameter>data</parameter>
is not needed anymore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="hb-face-create-for-tables.returns" role="returns">
<title>Returns</title>
<para>The new face object. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.2">0.9.2</link></para></refsect2>
<refsect2 id="hb-face-get-empty" role="function" condition="since:0.9.2">
<title>hb_face_get_empty&#160;()</title>
<indexterm zone="hb-face-get-empty" role="0.9.2"><primary>hb_face_get_empty</primary></indexterm>
<programlisting language="C"><link linkend="hb-face-t"><returnvalue>hb_face_t</returnvalue></link>&#160;*
hb_face_get_empty (<parameter><type>void</type></parameter>);</programlisting>
<para>Fetches the singleton empty face object.</para>
<refsect3 id="hb-face-get-empty.returns" role="returns">
<title>Returns</title>
<para>The empty face object. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.2">0.9.2</link></para></refsect2>
<refsect2 id="hb-face-reference" role="function" condition="since:0.9.2">
<title>hb_face_reference&#160;()</title>
<indexterm zone="hb-face-reference" role="0.9.2"><primary>hb_face_reference</primary></indexterm>
<programlisting language="C"><link linkend="hb-face-t"><returnvalue>hb_face_t</returnvalue></link>&#160;*
hb_face_reference (<parameter><link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>);</programlisting>
<para>Increases the reference count on a face object.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="hb-face-reference.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="hb-face-reference.returns" role="returns">
<title>Returns</title>
<para> The <parameter>face</parameter>
object</para>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.2">0.9.2</link></para></refsect2>
<refsect2 id="hb-face-destroy" role="function" condition="since:0.9.2">
<title>hb_face_destroy&#160;()</title>
<indexterm zone="hb-face-destroy" role="0.9.2"><primary>hb_face_destroy</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
hb_face_destroy (<parameter><link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>);</programlisting>
<para>Decreases the reference count on a face object. When the
reference count reaches zero, the face is destroyed,
freeing all memory.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="hb-face-destroy.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.2">0.9.2</link></para></refsect2>
<refsect2 id="hb-face-set-user-data" role="function" condition="since:0.9.2">
<title>hb_face_set_user_data&#160;()</title>
<indexterm zone="hb-face-set-user-data" role="0.9.2"><primary>hb_face_set_user_data</primary></indexterm>
<programlisting language="C"><link linkend="hb-bool-t"><returnvalue>hb_bool_t</returnvalue></link>
hb_face_set_user_data (<parameter><link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>,
                       <parameter><link linkend="hb-user-data-key-t"><type>hb_user_data_key_t</type></link> *key</parameter>,
                       <parameter><link linkend="void"><type>void</type></link> *data</parameter>,
                       <parameter><link linkend="hb-destroy-func-t"><type>hb_destroy_func_t</type></link> destroy</parameter>,
                       <parameter><link linkend="hb-bool-t"><type>hb_bool_t</type></link> replace</parameter>);</programlisting>
<para>Attaches a user-data key/data pair to the given face object.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="hb-face-set-user-data.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>The user-data key to set</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>A pointer to the user data</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>destroy</para></entry>
<entry role="parameter_description"><para>A callback to call when <parameter>data</parameter>
is not needed anymore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>replace</para></entry>
<entry role="parameter_description"><para>Whether to replace an existing data with the same key</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="hb-face-set-user-data.returns" role="returns">
<title>Returns</title>
<para> <literal>true</literal> if success, <literal>false</literal> otherwise</para>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.2">0.9.2</link></para></refsect2>
<refsect2 id="hb-face-get-user-data" role="function" condition="since:0.9.2">
<title>hb_face_get_user_data&#160;()</title>
<indexterm zone="hb-face-get-user-data" role="0.9.2"><primary>hb_face_get_user_data</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
hb_face_get_user_data (<parameter>const <link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>,
                       <parameter><link linkend="hb-user-data-key-t"><type>hb_user_data_key_t</type></link> *key</parameter>);</programlisting>
<para>Fetches the user data associated with the specified key,
attached to the specified face object.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="hb-face-get-user-data.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>The user-data key to query</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="hb-face-get-user-data.returns" role="returns">
<title>Returns</title>
<para>A pointer to the user data. </para>
<para><emphasis role="annotation">[<acronym>transfer none</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.2">0.9.2</link></para></refsect2>
<refsect2 id="hb-face-make-immutable" role="function" condition="since:0.9.2">
<title>hb_face_make_immutable&#160;()</title>
<indexterm zone="hb-face-make-immutable" role="0.9.2"><primary>hb_face_make_immutable</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
hb_face_make_immutable (<parameter><link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>);</programlisting>
<para>Makes the given face object immutable.</para>
<refsect3 id="hb-face-make-immutable.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.2">0.9.2</link></para></refsect2>
<refsect2 id="hb-face-is-immutable" role="function" condition="since:0.9.2">
<title>hb_face_is_immutable&#160;()</title>
<indexterm zone="hb-face-is-immutable" role="0.9.2"><primary>hb_face_is_immutable</primary></indexterm>
<programlisting language="C"><link linkend="hb-bool-t"><returnvalue>hb_bool_t</returnvalue></link>
hb_face_is_immutable (<parameter>const <link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>);</programlisting>
<para>Tests whether the given face object is immutable.</para>
<refsect3 id="hb-face-is-immutable.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="hb-face-is-immutable.returns" role="returns">
<title>Returns</title>
<para> <literal>true</literal> is <parameter>face</parameter>
is immutable, <literal>false</literal> otherwise</para>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.2">0.9.2</link></para></refsect2>
<refsect2 id="hb-face-get-table-tags" role="function" condition="since:1.6.0">
<title>hb_face_get_table_tags&#160;()</title>
<indexterm zone="hb-face-get-table-tags" role="1.6.0"><primary>hb_face_get_table_tags</primary></indexterm>
<programlisting language="C">unsigned <link linkend="int"><returnvalue>int</returnvalue></link>
hb_face_get_table_tags (<parameter>const <link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>,
                        <parameter>unsigned <link linkend="int"><type>int</type></link> start_offset</parameter>,
                        <parameter>unsigned <link linkend="int"><type>int</type></link> *table_count</parameter>,
                        <parameter><link linkend="hb-tag-t"><type>hb_tag_t</type></link> *table_tags</parameter>);</programlisting>
<para>Fetches a list of all table tags for a face, if possible. The list returned will
begin at the offset provided</para>
<refsect3 id="hb-face-get-table-tags.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>start_offset</para></entry>
<entry role="parameter_description"><para>The index of first table tag to retrieve</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>table_count</para></entry>
<entry role="parameter_description"><para>Input = the maximum number of table tags to return;
Output = the actual number of table tags returned (may be zero). </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>inout</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>table_tags</para></entry>
<entry role="parameter_description"><para>The array of table tags found. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>array</acronym> length=table_count]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="hb-face-get-table-tags.returns" role="returns">
<title>Returns</title>
<para> Total number of tables, or zero if it is not possible to list</para>
</refsect3><para role="since">Since: <link linkend="api-index-1.6.0">1.6.0</link></para></refsect2>
<refsect2 id="hb-face-set-glyph-count" role="function" condition="since:0.9.7">
<title>hb_face_set_glyph_count&#160;()</title>
<indexterm zone="hb-face-set-glyph-count" role="0.9.7"><primary>hb_face_set_glyph_count</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
hb_face_set_glyph_count (<parameter><link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>,
                         <parameter>unsigned <link linkend="int"><type>int</type></link> glyph_count</parameter>);</programlisting>
<para>Sets the glyph count for a face object to the specified value.</para>
<para>This API is used in rare circumstances.</para>
<refsect3 id="hb-face-set-glyph-count.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>glyph_count</para></entry>
<entry role="parameter_description"><para>The glyph-count value to assign</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.7">0.9.7</link></para></refsect2>
<refsect2 id="hb-face-get-glyph-count" role="function" condition="since:0.9.7">
<title>hb_face_get_glyph_count&#160;()</title>
<indexterm zone="hb-face-get-glyph-count" role="0.9.7"><primary>hb_face_get_glyph_count</primary></indexterm>
<programlisting language="C">unsigned <link linkend="int"><returnvalue>int</returnvalue></link>
hb_face_get_glyph_count (<parameter>const <link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>);</programlisting>
<para>Fetches the glyph-count value of the specified face object.</para>
<refsect3 id="hb-face-get-glyph-count.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="hb-face-get-glyph-count.returns" role="returns">
<title>Returns</title>
<para> The glyph-count value of <parameter>face</parameter>
</para>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.7">0.9.7</link></para></refsect2>
<refsect2 id="hb-face-set-index" role="function" condition="since:0.9.2">
<title>hb_face_set_index&#160;()</title>
<indexterm zone="hb-face-set-index" role="0.9.2"><primary>hb_face_set_index</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
hb_face_set_index (<parameter><link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>,
                   <parameter>unsigned <link linkend="int"><type>int</type></link> index</parameter>);</programlisting>
<para>Assigns the specified face-index to <parameter>face</parameter>
. Fails if the
face is immutable.</para>
<note>Note: changing the index has no effect on the face itself
This only changes the value returned by <link linkend="hb-face-get-index"><function>hb_face_get_index()</function></link>.</note>
<refsect3 id="hb-face-set-index.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>The index to assign</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.2">0.9.2</link></para></refsect2>
<refsect2 id="hb-face-get-index" role="function" condition="since:0.9.2">
<title>hb_face_get_index&#160;()</title>
<indexterm zone="hb-face-get-index" role="0.9.2"><primary>hb_face_get_index</primary></indexterm>
<programlisting language="C">unsigned <link linkend="int"><returnvalue>int</returnvalue></link>
hb_face_get_index (<parameter>const <link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>);</programlisting>
<para>Fetches the face-index corresponding to the given face.</para>
<note>Note: face indices within a collection are zero-based.</note>
<refsect3 id="hb-face-get-index.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="hb-face-get-index.returns" role="returns">
<title>Returns</title>
<para> The index of <parameter>face</parameter>
.</para>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.2">0.9.2</link></para></refsect2>
<refsect2 id="hb-face-set-upem" role="function" condition="since:0.9.2">
<title>hb_face_set_upem&#160;()</title>
<indexterm zone="hb-face-set-upem" role="0.9.2"><primary>hb_face_set_upem</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
hb_face_set_upem (<parameter><link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>,
                  <parameter>unsigned <link linkend="int"><type>int</type></link> upem</parameter>);</programlisting>
<para>Sets the units-per-em (upem) for a face object to the specified value.</para>
<para>This API is used in rare circumstances.</para>
<refsect3 id="hb-face-set-upem.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>upem</para></entry>
<entry role="parameter_description"><para>The units-per-em value to assign</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.2">0.9.2</link></para></refsect2>
<refsect2 id="hb-face-get-upem" role="function" condition="since:0.9.2">
<title>hb_face_get_upem&#160;()</title>
<indexterm zone="hb-face-get-upem" role="0.9.2"><primary>hb_face_get_upem</primary></indexterm>
<programlisting language="C">unsigned <link linkend="int"><returnvalue>int</returnvalue></link>
hb_face_get_upem (<parameter>const <link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>);</programlisting>
<para>Fetches the units-per-em (UPEM) value of the specified face object.</para>
<para>Typical UPEM values for fonts are 1000, or 2048, but any value
in between 16 and 16,384 is allowed for OpenType fonts.</para>
<refsect3 id="hb-face-get-upem.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="hb-face-get-upem.returns" role="returns">
<title>Returns</title>
<para> The upem value of <parameter>face</parameter>
</para>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.2">0.9.2</link></para></refsect2>
<refsect2 id="hb-face-reference-blob" role="function" condition="since:0.9.2">
<title>hb_face_reference_blob&#160;()</title>
<indexterm zone="hb-face-reference-blob" role="0.9.2"><primary>hb_face_reference_blob</primary></indexterm>
<programlisting language="C"><link linkend="hb-blob-t"><returnvalue>hb_blob_t</returnvalue></link>&#160;*
hb_face_reference_blob (<parameter><link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>);</programlisting>
<para>Fetches a pointer to the binary blob that contains the
specified face. Returns an empty blob if referencing face data is not
possible.</para>
<refsect3 id="hb-face-reference-blob.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="hb-face-reference-blob.returns" role="returns">
<title>Returns</title>
<para>A pointer to the blob for <parameter>face</parameter>
. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.2">0.9.2</link></para></refsect2>
<refsect2 id="hb-face-reference-table" role="function" condition="since:0.9.2">
<title>hb_face_reference_table&#160;()</title>
<indexterm zone="hb-face-reference-table" role="0.9.2"><primary>hb_face_reference_table</primary></indexterm>
<programlisting language="C"><link linkend="hb-blob-t"><returnvalue>hb_blob_t</returnvalue></link>&#160;*
hb_face_reference_table (<parameter>const <link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>,
                         <parameter><link linkend="hb-tag-t"><type>hb_tag_t</type></link> tag</parameter>);</programlisting>
<para>Fetches a reference to the specified table within
the specified face.</para>
<refsect3 id="hb-face-reference-table.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>The <link linkend="hb-tag-t"><type>hb_tag_t</type></link> of the table to query</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="hb-face-reference-table.returns" role="returns">
<title>Returns</title>
<para>A pointer to the <parameter>tag</parameter>
table within <parameter>face</parameter>
. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-0.9.2">0.9.2</link></para></refsect2>
<refsect2 id="hb-face-collect-unicodes" role="function" condition="since:1.9.0">
<title>hb_face_collect_unicodes&#160;()</title>
<indexterm zone="hb-face-collect-unicodes" role="1.9.0"><primary>hb_face_collect_unicodes</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
hb_face_collect_unicodes (<parameter><link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>,
                          <parameter><link linkend="hb-set-t"><type>hb_set_t</type></link> *out</parameter>);</programlisting>
<para>Collects all of the Unicode characters covered by <parameter>face</parameter>
 and adds
them to the <link linkend="hb-set-t"><type>hb_set_t</type></link> set <parameter>out</parameter>
.</para>
<refsect3 id="hb-face-collect-unicodes.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>out</para></entry>
<entry role="parameter_description"><para>The set to add Unicode characters to. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-1.9.0">1.9.0</link></para></refsect2>
<refsect2 id="hb-face-collect-nominal-glyph-mapping" role="function" condition="since:7.0.0">
<title>hb_face_collect_nominal_glyph_mapping&#160;()</title>
<indexterm zone="hb-face-collect-nominal-glyph-mapping" role="7.0.0"><primary>hb_face_collect_nominal_glyph_mapping</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
hb_face_collect_nominal_glyph_mapping (<parameter><link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>,
                                       <parameter><link linkend="hb-map-t"><type>hb_map_t</type></link> *mapping</parameter>,
                                       <parameter><link linkend="hb-set-t"><type>hb_set_t</type></link> *unicodes</parameter>);</programlisting>
<para>Collects the mapping from Unicode characters to nominal glyphs of the <parameter>face</parameter>
,
and optionally all of the Unicode characters covered by <parameter>face</parameter>
.</para>
<refsect3 id="hb-face-collect-nominal-glyph-mapping.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mapping</para></entry>
<entry role="parameter_description"><para>The map to add Unicode-to-glyph mapping to. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>unicodes</para></entry>
<entry role="parameter_description"><para>The set to add Unicode characters to, or <literal>NULL</literal>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>][<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-7.0.0">7.0.0</link></para></refsect2>
<refsect2 id="hb-face-collect-variation-selectors" role="function" condition="since:1.9.0">
<title>hb_face_collect_variation_selectors&#160;()</title>
<indexterm zone="hb-face-collect-variation-selectors" role="1.9.0"><primary>hb_face_collect_variation_selectors</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
hb_face_collect_variation_selectors (<parameter><link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>,
                                     <parameter><link linkend="hb-set-t"><type>hb_set_t</type></link> *out</parameter>);</programlisting>
<para>Collects all Unicode "Variation Selector" characters covered by <parameter>face</parameter>
 and adds
them to the <link linkend="hb-set-t"><type>hb_set_t</type></link> set <parameter>out</parameter>
.</para>
<refsect3 id="hb-face-collect-variation-selectors.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>out</para></entry>
<entry role="parameter_description"><para>The set to add Variation Selector characters to. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-1.9.0">1.9.0</link></para></refsect2>
<refsect2 id="hb-face-collect-variation-unicodes" role="function" condition="since:1.9.0">
<title>hb_face_collect_variation_unicodes&#160;()</title>
<indexterm zone="hb-face-collect-variation-unicodes" role="1.9.0"><primary>hb_face_collect_variation_unicodes</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
hb_face_collect_variation_unicodes (<parameter><link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>,
                                    <parameter><link linkend="hb-codepoint-t"><type>hb_codepoint_t</type></link> variation_selector</parameter>,
                                    <parameter><link linkend="hb-set-t"><type>hb_set_t</type></link> *out</parameter>);</programlisting>
<para>Collects all Unicode characters for <parameter>variation_selector</parameter>
 covered by <parameter>face</parameter>
 and adds
them to the <link linkend="hb-set-t"><type>hb_set_t</type></link> set <parameter>out</parameter>
.</para>
<refsect3 id="hb-face-collect-variation-unicodes.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>variation_selector</para></entry>
<entry role="parameter_description"><para>The Variation Selector to query</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>out</para></entry>
<entry role="parameter_description"><para>The set to add Unicode characters to. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-1.9.0">1.9.0</link></para></refsect2>
<refsect2 id="hb-face-builder-create" role="function" condition="since:1.9.0">
<title>hb_face_builder_create&#160;()</title>
<indexterm zone="hb-face-builder-create" role="1.9.0"><primary>hb_face_builder_create</primary></indexterm>
<programlisting language="C"><link linkend="hb-face-t"><returnvalue>hb_face_t</returnvalue></link>&#160;*
hb_face_builder_create (<parameter><type>void</type></parameter>);</programlisting>
<para>Creates a <link linkend="hb-face-t"><type>hb_face_t</type></link> that can be used with <link linkend="hb-face-builder-add-table"><function>hb_face_builder_add_table()</function></link>.
After tables are added to the face, it can be compiled to a binary
font file by calling <link linkend="hb-face-reference-blob"><function>hb_face_reference_blob()</function></link>.</para>
<refsect3 id="hb-face-builder-create.returns" role="returns">
<title>Returns</title>
<para>New face. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-1.9.0">1.9.0</link></para></refsect2>
<refsect2 id="hb-face-builder-add-table" role="function" condition="since:1.9.0">
<title>hb_face_builder_add_table&#160;()</title>
<indexterm zone="hb-face-builder-add-table" role="1.9.0"><primary>hb_face_builder_add_table</primary></indexterm>
<programlisting language="C"><link linkend="hb-bool-t"><returnvalue>hb_bool_t</returnvalue></link>
hb_face_builder_add_table (<parameter><link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>,
                           <parameter><link linkend="hb-tag-t"><type>hb_tag_t</type></link> tag</parameter>,
                           <parameter><link linkend="hb-blob-t"><type>hb_blob_t</type></link> *blob</parameter>);</programlisting>
<para>Add table for <parameter>tag</parameter>
 with data provided by <parameter>blob</parameter>
 to the face.  <parameter>face</parameter>
 must
be created using <link linkend="hb-face-builder-create"><function>hb_face_builder_create()</function></link>.</para>
<refsect3 id="hb-face-builder-add-table.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object created with <link linkend="hb-face-builder-create"><function>hb_face_builder_create()</function></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>The <link linkend="hb-tag-t"><type>hb_tag_t</type></link> of the table to add</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>blob</para></entry>
<entry role="parameter_description"><para>The blob containing the table data to add</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-1.9.0">1.9.0</link></para></refsect2>
<refsect2 id="hb-face-builder-sort-tables" role="function" condition="since:5.3.0">
<title>hb_face_builder_sort_tables&#160;()</title>
<indexterm zone="hb-face-builder-sort-tables" role="5.3.0"><primary>hb_face_builder_sort_tables</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
hb_face_builder_sort_tables (<parameter><link linkend="hb-face-t"><type>hb_face_t</type></link> *face</parameter>,
                             <parameter>const <link linkend="hb-tag-t"><type>hb_tag_t</type></link> *tags</parameter>);</programlisting>
<para>Set the ordering of tables for serialization. Any tables not
specified in the tags list will be ordered after the tables in
tags, ordered by the default sort ordering.</para>
<refsect3 id="hb-face-builder-sort-tables.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>face</para></entry>
<entry role="parameter_description"><para>A face object created with <link linkend="hb-face-builder-create"><function>hb_face_builder_create()</function></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tags</para></entry>
<entry role="parameter_description"><para>ordered list of table tags terminated by
<link linkend="HB-TAG-NONE:CAPS"><literal>HB_TAG_NONE</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> zero-terminated=1]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-5.3.0">5.3.0</link></para></refsect2>

</refsect1>
<refsect1 id="harfbuzz-hb-face.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="hb-face-t" role="typedef">
<title>hb_face_t</title>
<indexterm zone="hb-face-t"><primary>hb_face_t</primary></indexterm>
<programlisting language="C">typedef struct hb_face_t hb_face_t;
</programlisting>
<para>Data type for holding font faces.</para>
</refsect2>

</refsect1>

</refentry>
